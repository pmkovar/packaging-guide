<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Packaging_Software_Collections">
  <title>Packaging &DSCL;s</title>
  <para>This chapter introduces you to packaging &DSCL;s.</para>
  <section id="sect-Building_a_Software_Collection_Locally">
    <title>Building a &DSCL; Locally</title>
    <para>To build a &DSCL; on your system, run the following command:</para>
    <synopsis>
      <command>rpmbuild -bb <replaceable>package</replaceable>.spec --define 'scl <replaceable>name</replaceable>'</command>
    </synopsis>
    <para>The difference between the command shown above and the standard command to build conventional packages (<command>rpmbuild -bb <replaceable>package.spec</replaceable></command>) is that you have to append the <option>--define</option> option to the <command>rpmbuild</command> command when building a &DSCL;. </para>
    <para>The <option>--define</option> option defines the <code>scl</code> macro, which uses the &DSCL; as configured in the &DSCL; spec file.</para>
  </section>
  <section id="sect-Software_Collection_Macros">
    <title>&DSCL; Macros</title>
    <para>The &DSCL; packaging macro <code>scl</code> relocates the file structure, which is part of the &DSCL;, to a file system that is used exclusively by the &DSCL;.</para>
    <para>The <code>scl</code> macro also defines files ownership for the &DSCL;'s meta package and provides additional packaging macros to use in the &DSCL; environment.
</para>
    <para>When using &DSCL; macros in the spec file, you must prefix them with <code>%{?scl:<replaceable>macro</replaceable>}</code>, as in the following example:</para>
    <programlisting language="RPM Spec">%{?scl:Requires:%scl_runtime}</programlisting>
    <para>In the example above, the <code>%scl_runtime</code> macro is the value of the <code>Requires</code> tag. Both the macro and the tag use the <code>%{?scl:</code> prefix.</para>
    <section id="sect-Macros_Specific_to_a_Software_Collection">
      <title>Macros Specific to a &DSCL;</title>
      <para>The table below shows a list of all macros specific to a particular &DSCL;.</para>
      <table>
        <title>&DSCL; Specific Macros</title>
        <tgroup cols="3">
          <colspec colname="col_0"/>
          <colspec colname="col_1"/>
          <colspec colname="col_2"/>
          <thead>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>Macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Description</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Example value</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_name</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the &DSCL; </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%pkg_name</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the original package </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>perl</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>root of the &DSCL; (not package's root) </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_scripts</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>location of &DSCL;'s scriptlets </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/software_collection_1/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_require_package</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>depend on a particular package from the &DSCL;</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1-package_2</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_root</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>installation root (install-root) of the package </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/software_collection_1/root/</code>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-Macros_Not_Specific_to_a_Software_Collection">
      <title>Macros Not Specific to a &DSCL;</title>
      <para>The table below shows a list of macros that are not specific to a particular &DSCL;. Because these macros are not relocated and do not point to the &DSCL; file system, they allow you to point to the system root file system. These macros use <code>_root</code> as a prefix.</para>
      <table>
        <title>&DSCL; Non-Specific Macros</title>
        <tgroup cols="4">
          <colspec colname="col_0"/>
          <colspec colname="col_1"/>
          <colspec colname="col_2"/>
          <thead>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>Macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Description</para>
              </entry>              
              <entry colsep="1" rowsep="1">
                <para>Relocated</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Example value</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_prefix</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_exec_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_exec_prefix</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_bindir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_bindir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/bin/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sbindir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sbindir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/sbin/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_datadir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_datadir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sysconfdir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sysconfdir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/etc/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_libexecdir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_libexecdir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/libexec/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sharedstatedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sharedstatedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
             <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/com/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_localstatedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_localstatedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/var/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_includedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_includedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
             <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/include/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_infodir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_infodir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/info/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_mandir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_mandir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/man/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_initddir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_initddir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/etc/rc.d/init.d/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para> %<code>_root_libdir</code> </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_libdir</code> macro, this macro does not work if &DSCL;'s meta package is platform-independent</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/lib/</code>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section id="sect-Converting_a_Conventional_Spec_File">
    <title>Converting a Conventional Spec File</title>
        <para>The following steps show how to convert a conventional spec file into a &DSCL; spec file so that the &DSCL; spec file that you can use in both the conventional package and the &DSCL;.<!--To allow this option, a special macro usage needs to be followed while writing or converting a package for Software Collection.
Software Collection macros simply relocate package to non-conflicting namespaced path by redefining essential build macros such as %_bindir, %_sysconfdir, etc. and adding Software Collection specific virtual provides. With this concept the Software Collection specific actions in spec file need to be put into the %{?scl: <something> } constructs. --></para>
      <procedure>
        <title>Converting a Conventional Spec File into a &DSCL; Spec File</title>
        <step>
          <para>Add the <code>%scl_package</code> macro to the spec file. Place the macro in front of the spec file preamble as follows:</para>
          <programlisting language="RPM Spec">%{?scl:%scl_package <replaceable>package_name</replaceable>}</programlisting>
        </step>
        <step>
        <para>You are advised to define the <varname>%pkg_name</varname> macro in the spec file in case the package is not built for the &DSCL;:</para>
        <programlisting language="RPM Spec">%{!?scl:%global pkg_name %{name}}</programlisting>
        <para>Consequently, you can use the <varname>%pkg_name</varname> macro to define the original name of the package wherever it is needed in the spec file that you can then use for building both the conventional package and the &DSCL;.</para>
        </step>
        <step>
          <para>Change the <code>Name</code> tag in the spec file preamble as follows:</para>
          <programlisting language="RPM Spec">Name: %{?scl_prefix}<replaceable>package_name</replaceable></programlisting>
        </step>
        <step>
          <para>To check that all essential &DSCL;'s packages are dependencies of the main meta package, add the following macro after the <code>BuildRequires</code> or <code>Requires</code> tags in the spec file:</para>
          <programlisting language="RPM Spec">%{?scl:Requires: %scl_runtime}</programlisting>
        </step>
        <step>
          <para>Edit the <code>%setup</code> macro in the <code>%prep</code> section of the spec file so that the macro can deal with a different package name in the &DSCL; environment:</para>
          <programlisting language="RPM Spec">%setup -q -n %{pkg_name}-%{version}</programlisting>
        </step>
              </procedure>
       <bridgehead id="bh-Example_of_the_Converted_Spec_File">Example of the Converted Spec File</bridgehead>
<para>To see what the diff file comparing a conventional spec file with a converted spec file looks like, see the following example:</para>
      <programlisting language="RPM Spec">--- a/less.spec
+++ b/less.spec
@@ -1,10 +1,13 @@
+%{?scl:%scl_package less}
+%{!?scl:%global pkg_name %{name}}
+
 Summary: A text file browser similar to more, but better
-Name: less
+Name: %{?scl_prefix}less
 Version: 444
 Release: 7%{?dist}
 License: GPLv3+
 Group: Applications/Text
-Source: http://www.greenwoodsoftware.com/less/%{name}-%{version}.tar.gz
+Source: http://www.greenwoodsoftware.com/less/%{pkg_name}-%{version}.tar.gz
 Source1: lesspipe.sh
 Source2: less.sh
 Source3: less.csh
@@ -19,6 +22,7 @@ URL: http://www.greenwoodsoftware.com/less/
 Requires: groff
 BuildRequires: ncurses-devel
 BuildRequires: autoconf automake libtool
+%{?scl:Requires: %scl_runtime}
 
 %description
 The less utility is a text file browser that resembles more, but has
@@ -31,7 +35,7 @@ You should install less because it is a basic utility for viewing text
 files, and you'll use it frequently.
 
 %prep
-%setup -q
+%setup -q -n %{pkg_name}-%{version}
 %patch1 -p1 -b .Foption
 %patch2 -p1 -b .search
 %patch4 -p1 -b .time
@@ -51,16 +55,16 @@ make CC="gcc $RPM_OPT_FLAGS -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOU
 %install
 rm -rf $RPM_BUILD_ROOT
 make DESTDIR=$RPM_BUILD_ROOT install
-mkdir -p $RPM_BUILD_ROOT/etc/profile.d
+mkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
 install -p -c -m 755 %{SOURCE1} $RPM_BUILD_ROOT/%{_bindir}
-install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT/etc/profile.d
-install -p -c -m 644 %{SOURCE3} $RPM_BUILD_ROOT/etc/profile.d
-ls -la $RPM_BUILD_ROOT/etc/profile.d
+install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
+install -p -c -m 644 %{SOURCE3} $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
+ls -la $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
 
 %files
 %defattr(-,root,root,-)
 %doc LICENSE
-/etc/profile.d/*
+%{_sysconfdir}/profile.d/*
 %{_bindir}/*
 %{_mandir}/man1/*
 </programlisting>
  </section>
  <section id="sect-Using_a_Software_Collection_in_Your_Application">
    <title>Using a &DSCL; in Your Application</title>
<para>To use a &DSCL; in your application, you need to adjust the <code>BuildRequires</code> and <code>Requires</code> tags in your application's spec file so that these tags properly define dependencies on &DSCL;s.</para>
<para>For example, to define dependencies on two &DSCL;s named <application>software_collection_1</application> and <application>software_collection_2</application>, add the following three lines to your application's spec file:</para>
<programlisting language="RPM Spec">BuildRequires: scl-utils-build
Requires: %scl_require software_collection_1
Requires: %scl_require software_collection_2
</programlisting>
  </section>
  <section id="sect-Installing_a_Software_Collection">
    <title>Installing a &DSCL;</title>
    <para>To ensure that a &DSCL; is on your system, install the main meta package of the &DSCL;. You can use conventional tools like <application>Yum</application> or <application>PackageKit</application> for this task because &DSCL;s are fully compatible with the RPM Package Manager. For example, to install a &DSCL; named <code>software_collection_1</code> with <application>Yum</application>, run the following command:</para>
    <synopsis>
      <command>yum install -y <!--scl_-->software_collection_1</command>
    </synopsis>
    <para>This command will automatically install all the packages that are part of the &DSCL;. Also, if you install an application that depends on a &DSCL;, the &DSCL; will be installed along with the rest of the application's dependencies.</para>
<para>For detailed information on <application>Yum</application> and <application>PackageKit</application> usage, refer to the <ulink url="https://access.redhat.com/knowledge/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/index.html">Red Hat Enterprise Linux 6 Deployment Guide</ulink>.</para>
  </section>
  <section id="sect-Listing_Installed_Software_Collections">
    <title>Listing Installed &DSCL;s</title>
    <para>To get a list of &DSCL;s that are currently installed on the system, run the following command:</para>
    <synopsis>
      <command>scl --list</command>
    </synopsis>
  </section>
  <!--section id="sect-Running_an_Application_in_the_Software_Collection">
    <title>Running an Application in the &DSCL;</title>
    <para>To run an application that is part of the &DSCL;, use the <command>scl</command> tool. You can run the application directly or use a wrapper script to make running the application in the &DSCL; environment easier.</para>
  </section-->
  <section id="sect-Software_Collection_Initscript_Support">
    <title>&DSCL; Initscript Support</title>
    <para>Ensure that users can directly manage any services provided by the &DSCL; or one of the associated applications with the system default tools, like <application>service</application> or <application>chkconfig</application>.</para>
    <para>To avoid possible name conflicts with the system versions of the services that are part of the &DSCL;, make sure to adjust the <code>%install</code> section of the spec file as follows:</para>
    <programlisting language="RPM Spec">
%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/rc.d/%{?scl_prefix}<replaceable>service_name</replaceable>
</programlisting>
    <para>With this configuration in place, you can then refer to the version of the service included in the &DSCL; as follows:</para>
    <screen>%{?scl_prefix}<replaceable>service_name</replaceable></screen>
  </section>
  <section id="sect-Software_Collection_Library_Support">
    <title>&DSCL; Library Support</title>
    <para>In case you distribute libraries that you intend to use only in the &DSCL; environment or in addition to the libraries available on the system, adjust the <envar>LD_LIBRARY_PATH</envar> environment variable in the spec file as follows:</para>
    <programlisting language="RPM Spec">
export LD_LIBRARY_PATH=%{_libdir}:$LD_LIBRARY_PATH
</programlisting>
    <para>This configuration ensures that the version of the library in the &DSCL; is preferred over the version of the library available on the system if the &DSCL; is enabled.</para>
    <para>If you distribute libraries that you intend to use outside of the &DSCL; environment, you can use the directory <filename>/etc/ld.so.conf.d/</filename> for this purpose.</para>
    <warning>
      <!--title>Do not use /etc/ld.so.conf.d/ for libraries available on the system</title-->
      <para>Do not use <filename>/etc/ld.so.conf.d/</filename> for libraries already available on the system. Using <filename>/etc/ld.so.conf.d/</filename> is only recommended for a library that is not available on the system, as otherwise the version of the library in the &DSCL; might get preference over the system version of the library. That could lead to undesired behavior of the system versions of the applications, including unexpected termination and data loss.</para>
    </warning>
    <procedure>
      <title>Using /etc/ld.so.conf.d/ for libraries in the &DSCL;</title>
      <step>
        <para>Create a file named <filename>libs.conf</filename> and adjust the spec file configuration accordingly:</para>
        <programlisting language="RPM Spec">
SOURCE2: %{?scl_prefix}libs.conf
</programlisting>
      </step>
      <step>
        <para>In the <filename>libs.conf</filename> file, include a list of directories where the versions of the libraries associated with the &DSCL; are located. For example:</para>
        <programlisting>/&OPT;/&RH;/software_collection_1/root/usr/lib64/
</programlisting>
        <para>In the example above, the <filename>/usr/lib64/</filename> directory that is part of the &DSCL; <application>software_collection_1</application> is included in the list.</para>
      </step>
      <step>
        <para>Edit the <code>%install</code> section of the spec file, so the <filename>libs.conf</filename> file is installed as follows:</para>
        <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/ld.so.conf.d/
</programlisting>
      </step>
    </procedure>
  </section>
<section id="sect-Software_Collection_pc_Files_Support">
    <title>&DSCL; .pc Files Support</title>
    <para>The .pc files are special metadata files used by the <application>pkg-config</application> program to store information about libraries available on the system. In case you distribute .pc files that you intend to use only in the &DSCL; environment or in addition to the .pc files installed on the system, adjust the <envar>PKG_CONFIG_PATH</envar> environment variable. Depending on what is defined in your .pc files, adjust the <envar>PKG_CONFIG_PATH</envar> environment variable for the <varname>%{_libdir}</varname> macro (which expands to the library directory, typically <filename>/usr/lib/</filename> or <filename>/usr/lib64/</filename>), or for the <varname>%{_datadir}</varname> macro (which expands to the share directory, typically <filename>/usr/share/</filename>).</para>
    <para>If the library directory is defined in your .pc files, adjust the <envar>PKG_CONFIG_PATH</envar> environment variable in the spec file as follows:</para>
    <programlisting language="RPM Spec">
export PKG_CONFIG_PATH=%{_libdir}/pkgconfig:\$PKG_CONFIG_PATH
</programlisting>
    <para>If the share directory is defined in your .pc files, adjust the <envar>PKG_CONFIG_PATH</envar> environment variable in the spec file as follows:</para>
    <programlisting language="RPM Spec">
export PKG_CONFIG_PATH=%{_datadir}/pkgconfig:\$PKG_CONFIG_PATH
</programlisting>
    <para>This configuration ensures that the .pc files in the &DSCL; are preferred over the .pc files available on the system if the &DSCL; is enabled.</para>
    <para>Under certain circumstances the &DSCL; can provide a wrapper script that is visible to the system to enable the &DSCL;, for example in the <filename>/usr/bin/</filename> directory. In this case, ensure that the .pc files are visible to the system even if the &DSCL; is disabled.</para>
    <para>To allow your system to use .pc files from the disabled &DSCL;, update the <envar>PKG_CONFIG_PATH</envar> environment variable with the paths to the .pc files associated with the &DSCL;. Depending on what is defined in your .pc files, adjust the <envar>PKG_CONFIG_PATH</envar> environment variable for the <varname>%{_libdir}</varname> macro (which expands to the library directory), or for the <varname>%{_datadir}</varname> macro (which expands to the share directory).</para>
<procedure><title>Updating the PKG_CONFIG_PATH environment variable for %{_libdir}</title>
<step><para>To update the <envar>PKG_CONFIG_PATH</envar> environment variable the <varname>%{_libdir}</varname> macro, create a custom script <filename>/etc/profile.d/<replaceable>name.sh</replaceable></filename>. The script is preloaded when a shell is started on the system.</para>
<para>For example, create the following file:</para>
    <screen>%{?scl_prefix}pc-libdir.sh</screen></step>
<step><para>Use the <filename>pc-libdir.sh</filename> short script that modifies the <envar>PKG_CONFIG_PATH</envar> variable to refer to your .pc files:</para>
    <screen>export PKG_CONFIG_PATH=%{_libdir}/pkgconfig:/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection/path/to/your/pc_files</replaceable></screen></step>
<step><para>Add the file to your &DSCL; package's spec file:</para>
<programlisting language="RPM Spec">SOURCE2: %{?scl_prefix}pc-libdir.sh</programlisting></step>
    <step><para>Install this file into the system <filename>/etc/profile.d/</filename> directory by adjusting the <code>%install</code> section of the &DSCL; package's spec file:</para>
    <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/profile.d/</programlisting>
</step>
</procedure>
<procedure><title>Updating the PKG_CONFIG_PATH environment variable for %{_datadir}</title>
<step><para>To update the <envar>PKG_CONFIG_PATH</envar> environment variable for the <varname>%{_datadir}</varname> macro, create a custom script <filename>/etc/profile.d/<replaceable>name.sh</replaceable></filename>. The script is preloaded when a shell is started on the system.</para>
<para>For example, create the following file:</para>
    <screen>%{?scl_prefix}pc-datadir.sh</screen></step>
<step><para>Use the <filename>pc-datadir.sh</filename> short script that modifies the <envar>PKG_CONFIG_PATH</envar> variable to refer to your .pc files:</para>
    <screen>export PKG_CONFIG_PATH=%{_datadir}/pkgconfig:/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection/path/to/your/pc_files</replaceable></screen></step>
<step><para>Add the file to your &DSCL; package's spec file:</para>
<programlisting language="RPM Spec">SOURCE2: %{?scl_prefix}pc-datadir.sh</programlisting></step>
    <step><para>Install this file into the system <filename>/etc/profile.d/</filename> directory by adjusting the <code>%install</code> section of the &DSCL; package's spec file:</para>
    <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/profile.d/</programlisting>
</step>
</procedure>
</section>
  <section id="sect-Software_Collection_manpath_Support">
    <title>&DSCL; manpath Support</title>
    <para>To allow the <command>man</command> command on the system to display manual pages from the enabled &DSCL;, update the <envar>MANPATH</envar> environment variable with the paths to the manual pages that are associated with the &DSCL;.</para>
    <para>To update the <envar>MANPATH</envar> environment variable, add the following line to the spec file:</para>
    <programlisting language="RPM Spec">export MANPATH=${MANPATH}:%{_mandir}</programlisting>
    <para>This update relocates the <code>%{_mandir}</code> macro to the &DSCL; path. So that the manual pages associated with the &DSCL; are not visible as long as the &DSCL; is not enabled.</para>
    <para>Under certain circumstances the &DSCL; can provide a wrapper script that is visible to the system to enable the &DSCL;, for example in the <filename>/usr/bin/</filename> directory. In this case, ensure that the manual pages are visible to the system even if the &DSCL; is disabled.</para>
    <para>To allow the <command>man</command> command on the system to display manual pages from the disabled &DSCL;, update the <envar>MANPATH</envar> environment variable with the paths to the manual pages associated with the &DSCL;.</para>
<procedure><title>Updating the MANPATH environment variable for the disabled &DSCL;</title>
<step><para>To update the <envar>MANPATH</envar> environment variable, create a custom script <filename>/etc/profile.d/<replaceable>name.sh</replaceable></filename>. The script is preloaded when a shell is started on the system.</para>
<para>For example, create the following file:</para>
    <screen>%{?scl_prefix}manpage.sh</screen></step>
<step><para>Use the <filename>manpage.sh</filename> short script that modifies the <envar>MANPATH</envar> variable to refer to your man path directory:</para>
    <screen>export MANPATH=${MANPATH}:/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection/path/to/your/man_pages</replaceable></screen></step>
<step><para>Add the file to your &DSCL; package's spec file:</para>
<programlisting language="RPM Spec">SOURCE2: %{?scl_prefix}manpage.sh</programlisting></step>
    <step><para>Install this file into the system <filename>/etc/profile.d/</filename> directory by adjusting the <code>%install</code> section of the &DSCL; package's spec file:</para>
    <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/profile.d/</programlisting>
</step>
</procedure>
  </section>
    <section id="sect-Software_Collection_SystemTap_Support">
    <title>&DSCL; SystemTap Support</title>
    <para>SystemTap is a useful instrumentation platform for probing running processes and kernel activity on the Linux system.  In case you distribute the SystemTap data directory for cached SystemTap data files that you intend to use only in the &DSCL; environment or in addition to the SystemTap data files available on the system, adjust the <envar>XDG_DATA_DIRS</envar> environment variable in the spec file as follows:</para>
    <programlisting language="RPM Spec">
export XDG_DATA_DIRS=%{_datadir}:\$XDG_DATA_DIRS
</programlisting>
    <para>This configuration ensures that the SystemTap data files in the &DSCL; are preferred over the SystemTap data files available on the system if the &DSCL; is enabled.</para>
    <para>Under certain circumstances the &DSCL; can provide a wrapper script that is visible to the system to enable the &DSCL;, for example in the <filename>/usr/bin/</filename> directory. In this case, ensure that the SystemTap data files are visible to the system even if the &DSCL; is disabled.</para>
    <para>To allow your system to use SystemTap data files from the disabled &DSCL;, update the <envar>XDG_DATA_DIRS</envar> environment variable with the paths to the SystemTap data files associated with the &DSCL;.</para>
<procedure><title>Updating the XDG_DATA_DIRS environment variable for the disabled &DSCL;</title>
<step><para>To update the <envar>XDG_DATA_DIRS</envar> environment variable, create a custom script <filename>/etc/profile.d/<replaceable>name.sh</replaceable></filename>. The script is preloaded when a shell is started on the system.</para>
<para>For example, create the following file:</para>
    <screen>%{?scl_prefix}systemtap.sh</screen></step>
<step><para>Use the <filename>systemtap.sh</filename> short script that modifies the <envar>XDG_DATA_DIRS</envar> variable to refer to your SystemTap data files directory:</para>
    <screen>export XDG_DATA_DIRS=${XDG_DATA_DIRS}:/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection/path/to/your/systemtap_data_files</replaceable></screen></step>
<step><para>Add the file to your &DSCL; package's spec file:</para>
<programlisting language="RPM Spec">SOURCE2: %{?scl_prefix}systemtap.sh</programlisting></step>
    <step><para>Install this file into the system <filename>/etc/profile.d/</filename> directory by adjusting the <code>%install</code> section of the &DSCL; package's spec file:</para>
    <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/profile.d/</programlisting>
</step>
</procedure>
  </section>
  <section id="sect-Software_Collection_cronjob_Support">
    <title>&DSCL; cronjob Support</title>
    <para>With your &DSCL;, you can run regular tasks on the system either with a dedicated service or with cronjobs. If you intend to use a dedicated service, refer to <xref linkend="sect-Software_Collection_Initscript_Support"/> on how to work with initscripts in the &DSCL; environment.</para>
    <procedure>
      <title>Running regular tasks with cronjobs</title>
      <step>
        <para>To use cronjobs for running regular tasks, place a <filename>crontab</filename> file for your &DSCL; in the <filename>/etc/cron.d/</filename> directory with the &DSCL;'s name.</para>
        <para>For example, create the following file:</para>
        <screen>%{?scl_prefix}crontab</screen>
      </step>
      <step>
        <para>Ensure that the contents of the <filename>crontab</filename> file follow the standard <filename>crontab</filename> file format, as in the following example:</para>
        <screen>0 1 * * Sun root <filename>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/<replaceable>architecture</replaceable>/usr/bin/<replaceable>cron_job_name</replaceable></filename></screen>
      </step>
      <step>
        <para>Add the file to your spec file of the &DSCL; package:</para>
        <programlisting language="RPM Spec">SOURCE2: %{?scl_prefix}crontab</programlisting>
      </step>
      <step>
        <para>Install the file into the system directory <filename>/etc/cron.d/</filename> by adjusting the <code>%install</code> section of the &DSCL; package's spec file:</para>
        <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/cron.d/
</programlisting>
      </step>
    </procedure>
  </section>
  <section id="sect-Software_Collection_logrotate_Support">
    <title>&DSCL; logrotate Support</title>
    <para>With your &DSCL; or an application associated with your &DSCL;, you can manage log files with the <application>logrotate</application> program.</para>
    <procedure>
      <title>Managing log files with logrotate</title>
      <step>
        <para>To manage your log files with <application>logrotate</application>, place a custom <application>logrotate</application> file for your &DSCL; in the system directory for the <application>logrotate</application> jobs <filename>/etc/logrotate.d/</filename>.</para>
        <para>For example, create the following file:</para>
        <screen>%{?scl_prefix}logrotate</screen>
      </step>
      <step>
        <para>Ensure that the contents of the <filename>logrotate</filename> file follow the standard <filename>logrotate</filename> file format as follows:</para>
        <screen>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/var/log/<replaceable>your_application_name</replaceable>.log {
      missingok
      notifempty
      size 30k
      yearly
      create 0600 root root
  }</screen>
      </step>
      <step>
        <para>Add the file to your spec file of the &DSCL; package:</para>
        <programlisting language="RPM Spec">SOURCE2: %{?scl_prefix}logrotate</programlisting>
      </step>
      <step>
        <para>Install the file into the system directory <filename>/etc/logrotate.d/</filename> by adjusting the <code>%install</code> section of the &DSCL; package's spec file:</para>
        <programlisting language="RPM Spec">%install
install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{?scl:%_root_sysconfdir}%{!?scl:%_sysconfdir}/logrotate.d/</programlisting>
      </step>
    </procedure>
  </section>
  <section id="sect-Software_Collection_Lock_File_Support">
    <title>&DSCL; Lock File Support</title>
    <para>If you store your &DSCL;'s lock files within the <filename>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/</filename> file system hierarchy, you can avoid any possible conflicts with the system versions of the applications or services that can be on the system.</para>
    <para>If you want to prevent &DSCL;'s applications or services from running while the system version of the respective application or service is running, make sure that your applications or services, which require a lock, write the lock to the system directory <filename>/var/lock/</filename> instead of the &DSCL;'s directory <filename>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/var/lock/</filename>. In this way, your applications or services' lock file will not be overwritten. The lock file will not be renamed and the name stays the same as the system version.</para>
    <para>If you want your &DSCL;'s version of the application or service to run concurrently with the system version (when the &DSCL; version's resources will not conflict with the system version's resources), ensure that the applications or services write the lock to the &DSCL;'s directory <filename>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/var/lock/</filename>.</para>
  </section>
  <section id="sect-Software_Collection_Configuration_Files_Support">
    <title>&DSCL; Configuration Files Support</title>
    <para>If you store your &DSCL;'s configuration files within the <filename>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/</filename> file system hierarchy, you can avoid any possible conflicts with the system versions of the configuration files that can be present on the system.</para>
    <para>If you cannot store the configuration files within <filename>/&OPT;/<replaceable>&RH;</replaceable>/<replaceable>software_collection</replaceable>/</filename>, then ensure that you properly configure an alternative location for the configuration files. For many programs, this can be usually done at build or installation time.</para>
  </section>
  <section id="sect-Software_Collection_Kernel_Module_Support">
    <title>&DSCL; Kernel Module Support</title>
    <para>Because Linux kernel modules are normally tied to a particular version of the Linux kernel, you must be careful when you package kernel modules into a &DSCL;. This is because the package management system on &MAJOROS; does not automatically update or install an updated version of the kernel module if an updated version of the Linux kernel is installed. To make packaging the kernel modules into the &DSCL; easier, see the following recommendations. Ensure that:</para>
    <orderedlist>
      <listitem>
        <para>the name of your kernel module package includes the kernel version,</para>
      </listitem>
      <listitem>
        <para>the tag <code>Requires</code>, which can be found in your kernel module spec file, includes the kernel version and revision (in the format <code>kernel-<replaceable>version</replaceable>-<replaceable>revision</replaceable></code>).</para>
      </listitem>
    </orderedlist>
  </section>
  <section id="sect-Software_Collection_SELinux_Support">
    <title>&DSCL; SELinux Support</title>
    <para>Because &DSCL;s are designed to install the &DSCL; packages in an alternate directory, set up the necessary SELinux labels so that SELinux is aware of the alternate directory.</para>
    <para>If the file system hierarchy of your &DSCL; package imitates the file system hierarchy of the corresponding conventional package, you can run the <command>semanage fcontext</command> and <command>restorecon</command> commands to set up the SELinux labels.</para>
    <para>For example, if the <filename>/&OPT;/&RH;/software_collection_1/x86_64/root/usr/</filename> directory in your &DSCL; package imitates the <filename>/usr/</filename> directory of your conventional package, set up the SELinux labels as follows:</para>
    <synopsis>
      <command>semanage fcontext -a -e /usr /&OPT;/&RH;/software_collection_1/x86_64/root/usr</command>
    </synopsis>
    <synopsis>
      <command>restorecon -R -v /&OPT;/&RH;/software_collection_1/x86_64/root/usr</command>
    </synopsis>
    <para>The commands above ensure that all directories and files in the <filename>/&OPT;/&RH;/software_collection_1/x86_64/root/usr/</filename> directory are labeled by SELinux as if they were located in the <filename>/usr/</filename> directory.</para>
    <para>To use the <command>semanage fcontext</command> and <command>restorecon</command> commands in your &DSCL;, add the commands to the <code>%post</code> post-installation scriptlet in the &DSCL; spec file.</para>
  </section>
</chapter>
