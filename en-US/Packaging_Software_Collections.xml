<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Packaging_Software_Collections">
  <title>Packaging &DSCL;s</title>
  <para>This chapter introduces you to packaging &DSCL;s.</para>
  <section id="Creating_Your_Own_Software_Collections">
  	<title>Creating Your Own &DSCL;s</title>
  	<para>In general, you can use one of the following two approaches to deploy an application that depends on an existing &DSCL;:
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>
  				install all required Software Collections and packages manually and then deploy your application, or
  			</para>
  		</listitem>
  		<listitem>
  			<para>
  				create a new Software Collection for your application.
  			</para>
  		</listitem>
  	</itemizedlist>
  	<variablelist>
  	<title>When creating a new &DSCL; for your application:</title>
  	<varlistentry>
  		<term>Create a &DSCL; metapackage</term>
  		<listitem>
  			<para>
  				Each &DSCL; includes a metapackage, which installs a minimal subset of essential packages. See <xref linkend="sect-Meta_Package" /> for more information on creating metapackages.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Specify the location of the &DSCL; root directory</term>
  		<listitem>
  			<para>
  				Ensure that the location of the &DSCL; root directory is specified by setting the <code>%_scl_prefix</code> macro in the &DSCL; spec file. For more information, see <xref linkend="sect-The_Software_Collection_Root_Directory" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Prefix the name of your &DSCL; packages</term>
  		<listitem>
  			<para>
  				Ensure that the name of your &DSCL; packages is prefixed with the vendor and &DSCL;'s name. For more information, see <xref linkend="sect-The_Software_Collections_Prefix" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Specify all &DSCL;s and other packages required by your application as dependencies</term>
  		<listitem>
  			<para>
  				Ensure that all &DSCL;s and other packages required by your application are specified as dependencies of your &DSCL;. For more information, see <xref linkend="sect-Using_a_Software_Collection_in_Your_Application" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Convert existing conventional packages or create new &DSCL; packages</term>
  		<listitem>
  			<para>
  				Ensure that all macros in your &DSCL; package spec files use conditionals. See <xref linkend="sect-Converting_a_Conventional_Spec_File" /> for more information on how to convert an existing package spec file.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Build your &DSCL;</term>
  		<listitem>
  			<para>
  				After you create the &DSCL; metapackage and convert or create packages for your &DSCL;, you can build the &DSCL; with the <application>rpmbuild</application> utility. For more information, see <xref linkend="sect-Building_a_Software_Collection_Locally" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	</variablelist>
  </section>
  <section id="sect-The_File_System_Hierarchy">
    <title>The File System Hierarchy</title>
    <para>The root directory of &DSCL;s is normally located in the <filename>/&OPT;/</filename> directory to avoid possible conflicts between &DSCL;s and the base system installation. The use of the <filename>/&OPT;/</filename> directory is recommended by the Filesystem Hierarchy Standard (FHS).</para>
    <para>Below is an example of the file system hierarchy layout with two &DSCL;s, <replaceable>software_collection_1</replaceable> and <replaceable>software_collection_2</replaceable>:</para>
    <figure float="0" id="fig-The_File_System_Hierarchy">
      <title>The &DSCL; File System Hierarchy</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scl-fs-hierarchy.png" format="PNG" />
          </imageobject>
      </mediaobject>
    </figure>
    <para>As you can see above, each of the &DSCL;s directories contains the &DSCL; root directory, and one or more &DSCL; scriptlets. For more information on the &DSCL; scriptlets, refer to <xref linkend="sect-Software_Collection_Scriptlets"/>.</para>
    </section>
    <section id="sect-The_Software_Collection_Root_Directory">
    	<title>The &DSCL; Root Directory</title>
    <para>You can change the location of the root directory by setting the <code>%_scl_prefix</code> macro in the spec file, as in the following example:</para>
    <programlisting language="RPM Spec">%global _scl_prefix /opt/<replaceable>provider</replaceable></programlisting>
    <para>where <replaceable>provider</replaceable> is the provider (vendor) name registered, where applicable, with the Linux Foundation and the subordinated Linux Assigned Names and Numbers Authority (LANANA), in conformance with the Filesystem Hierarchy Standard.</para>
    <para>Each organization or project that builds and distributes &DSCL;s should use its own provider name, which conforms to the Filesystem Hierarchy Standard (FHS) and avoids possible conflicts between &DSCL;s and the base system installation.</para>
    <para>You are advised to make the file system hierarchy conform to the following layout:</para>
    <programlisting>/opt/<replaceable>provider</replaceable>/<replaceable>prefix-application-version</replaceable>/</programlisting>
    <para>For more information on the Filesystem Hierarchy Standard, see <ulink url="http://www.pathname.com/fhs/">http://www.pathname.com/fhs/</ulink>.</para>
    <para>For more information on the Linux Assigned Names and Numbers Authority, see <ulink url="http://www.lanana.org/">http://www.lanana.org/</ulink>.</para>
    </section>
  <section id="sect-The_Software_Collections_Prefix">
  	<title>The &DSCL; Prefix</title>
  	<para>
  		When naming your &DSCL;, it is important to prefix the name of your &DSCL; as described below in order to avoid possible name conflicts with the system versions of the packages that are part of your &DSCL;.
  	</para>
  	<para>
  		The &DSCL; prefix consists of two parts: 
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>
  				the <replaceable>provider</replaceable> part, which defines the provider name, and
			</para>
		</listitem>
		<listitem>
			<para>
				the name of the &DSCL; itself.
			</para>
		</listitem>
  	</itemizedlist>
  	<para>These two parts of the &DSCL; prefix are separated by an underscore (<literal>_</literal>), as in the following example:</para>
	<programlisting>myorganization_ruby193</programlisting>
	<para>In this example, <replaceable>myorganization</replaceable> is the provider name, and <replaceable>ruby193</replaceable> is the name of the &DSCL;.
	</para>
	</section>
	<section id="sect-Software_Collection_Package_Names">
		<title>&DSCL; Package Names</title>
  	<para>
  		The &DSCL; package name consists of two parts: 
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>
  				the <replaceable>prefix</replaceable> part, discussed in <xref linkend="sect-The_Software_Collections_Prefix" />, and
			</para>
		</listitem>
		<listitem>
			<para>
				the name and version number of the application that is a part of the &DSCL;.
			</para>
		</listitem>
  	</itemizedlist>
  	<para>These two parts of the &DSCL; package name are separated by a dash (<literal>-</literal>), as in the following example:</para>
	<programlisting>myorganization_ruby193-foreman-1.1</programlisting>
	<para>In this example, <replaceable>myorganization_ruby193</replaceable> is the prefix, and <replaceable>foreman-1.1</replaceable> is the name and version number of the application.</para>
    </section>
  <section id="sect-Software_Collection_Scriptlets">
    <title>&DSCL; Scriptlets</title>
    <para>The &DSCL; scriptlets are simple shell scripts that change the current system environment so that the group of packages in the &DSCL; is preferred over the corresponding group of conventional packages installed on the system.</para>
    <para>To utilize the &DSCL; scriptlets, use the <application>scl</application> tool that is part of the <package>scl-utils</package> package. For more information on <application>scl</application>, refer to <xref linkend="sect-Enabling_the_Software_Collection"/>.</para>
    <para>
      A single &DSCL; can include multiple &DSCL; scriptlets. These scriptlets are located in the <filename>/&OPT;/&RH;/software_collection/</filename> directory in your &DSCL; package. If you only need to distribute a single scriptlet in your &DSCL;, it is highly recommended that you use <filename>enable</filename> as the name for that scriptlet. When the user runs a command in the &DSCL; environment by executing <command>scl enable <replaceable>software_collection</replaceable> <replaceable>command</replaceable></command>, the <filename>/&OPT;/&RH;/software_collection/enable</filename> scriptlet is then used to update search paths, and so on.
    </para>
    <para>
      Note that &DSCL; scriptlets can only set the system environment in a subshell that is created by running the <command>scl enable</command> command. The subshell is only active for the time the command is being performed.
    </para>
  </section>
  <section id="sect-Package_Layout">
    <title>Package Layout</title>
    <para>Each &DSCL;'s layout consists of the metapackage, which installs a subset of other packages, and a number of the &DSCL;'s packages, which are installed within the &DSCL; namespace.</para>
    <section id="sect-Meta_Package">
      <title>Metapackage</title>
      <para>Each &DSCL; includes a metapackage, which installs a minimal subset of essential packages. For example, the essential packages can provide the Perl language interpreter, but no Perl extension modules. The metapackage contains a basic file system hierarchy and delivers a number of the &DSCL;'s scriptlets.</para>
      <para>The purpose of the metapackage is to make sure that all essential packages in the &DSCL; are properly installed and that it is possible to enable the &DSCL;.</para>
      <para>The metapackage produces the following packages that are also part of the &DSCL;:</para>
      <variablelist>
        <varlistentry>
          <term>The main package: %scl</term>
          <listitem>
            <para>The main package in the &DSCL; contains dependencies of the base packages, which are included in the &DSCL;. The main package does not contain any files.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization_ruby193</literal>, then the main package macro is expanded to:</para>
            <programlisting>myorganization_ruby193</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The runtime subpackage: <replaceable>name</replaceable>-runtime</term>
          <listitem>
            <para>The runtime subpackage in the &DSCL; owns the &DSCL;'s file system and delivers the &DSCL;'s scriptlets.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization_ruby193</literal>, then the runtime subpackage macro is expanded to:</para>
            <programlisting>myorganization_ruby193-runtime</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The build subpackage: <replaceable>name</replaceable>-build</term>
          <listitem>
            <para>The build subpackage in the &DSCL; delivers the &DSCL;'s build configuration. The build subpackage is optional and can be excluded from the &DSCL;.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization_ruby193</literal>, then the build subpackage macro is expanded to:</para>
            <programlisting>myorganization_ruby193-build</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
</section>
<section id="sect-Creating_a_Meta_Package">
<title>Creating a Metapackage</title>
<itemizedlist>
	<title>When creating a new metapackage:</title>
	<listitem>
		<para>
			You are advised to add <code language="RPM Spec">Requires: scl-utils-build</code> to the <package>build</package> subpackage.
		</para>
	</listitem>
	<listitem>
		<para>
			Add any macros you need to use to the <filename>macros.%{scl}-config</filename> file in the <package>build</package> subpackage.
		</para>
	</listitem>
	<listitem>
		<para>
			You are not required to use conditionals for &DSCL;-specific macros in the metapackage.
		</para>
	</listitem>
	<listitem>
		<para>
			Consider specifying all packages in your &DSCL; that are essential for the &DSCL; run time as dependencies of the metapackage. That way you can ensure that the packages are installed with the &DSCL; metapackage.
		</para>
	</listitem>
	<listitem>
		<para> 
			Include any path redefinition that the packages in your &DSCL; may require in the <filename>enable</filename> scriptlet.
		</para>
		<para>
			For example, to run &DSCL; binary files, add <code language="RPM Spec">PATH=%{_bindir}\${PATH:+:\${PATH}}</code> to the <filename>enable</filename> scriptlet.
		</para>
	</listitem>
	<listitem>
		<para>
		 	Always make sure that the metapackage contains the <command>%setup</command> macro in the <code>%prep</code> section, otherwise building the &DSCL; will fail. If you do not need to use a particular option with the <code>%setup</code> macro, add the  <code language="RPM Spec">%setup -c -T</code> command to the <code>%prep</code> section.
		 	</para>
		 	<para>
		 		This is because the <command>%setup</command> macro defines and creates the <code language="RPM Spec">%buildsubdir</code> directory, which is normally used for storing temporary files at build time. If you do not define <command>%setup</command> in your &DSCL; packages, files in the <code language="RPM Spec">%buildsubdir</code> directory will be overwritten, causing the build to fail.
		 	</para>
	</listitem>
</itemizedlist>
<bridgehead id="bh-Example_of_the_Meta_Package">Example of the Metapackage</bridgehead>
<para>To get an idea of what a typical &DSCL; metapackage looks like, see the following example:</para>
      <programlisting language="RPM Spec">%global scl software_collection
%scl_package %scl
%global _scl_prefix /opt/myorganization

Summary: Package that installs %scl
Name: %scl_name
Version: 1
Release: 1%{?dist}
License: GPLv2+
Requires: %{scl_prefix}less
BuildRequires: scl-utils-build

%description
This is the main package for %scl Software Collection.

%package runtime
Summary: Package that handles %scl Software Collection.
Requires: scl-utils

%description runtime
Package shipping essential scripts to work with %scl Software Collection.

%package build
Summary: Package shipping basic build configuration
Requires: scl-utils-build

%description build
Package shipping essential configuration macros to build %scl Software Collection.

%prep
%setup -c -T

%install
rm -rf %{buildroot}
mkdir -p %{buildroot}%{_scl_scripts}/root
cat &gt;&gt; %{buildroot}%{_scl_scripts}/enable &lt;&lt; EOF
export PATH=%{_bindir}\${PATH:+:\${PATH}}
EOF
%scl_install

%files

%files runtime
%scl_files

%files build
%{_root_sysconfdir}/rpm/macros.%{scl}-config

%changelog
* Fri Aug 30 2013 John Doe &lt;jdoe@example.com&gt; 1-1
- Initial package
      </programlisting>
    </section>
    <!--<section id="sect-Packages_in_the_Software_Collection_Namespace">
      <title>Packages in the &DSCL; Namespace</title>
      <para>Besides the minimal subset of packages installed by the metapackage, the &DSCL; also installs a number of packages that are part of the package collection itself.</para>
      <variablelist>
        <varlistentry>
          <term>&DSCL; package: <replaceable>name</replaceable>-<replaceable>pkgname</replaceable></term>
          <listitem>
            <para>The &DSCL; can contain a number of packages, which are included in the &DSCL; namespace and relocated to the &DSCL;'s file system hierarchy.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization_ruby193</literal>, then the &DSCL;'s package name for the <package>ruby-1.9.3.352-2.1.&PKGOS;.x86_64.rpm</package> package is:</para>
            <programlisting>myorganization_ruby193-ruby-1.9.3.352-2.1.&PKGOS;.x86_64.rpm</programlisting>
            <para></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>-->
  </section>
  <section id="sect-Software_Collection_Macros">
    <title>&DSCL; Macros</title>
    <para>The &DSCL; packaging macro <code>scl</code> relocates the file structure, which is part of the &DSCL;, to a file system that is used exclusively by the &DSCL;.</para>
    <para>The <code>scl</code> macro also defines files ownership for the &DSCL;'s metapackage and provides additional packaging macros to use in the &DSCL; environment.
</para>
    <para>When using &DSCL; macros in the spec file, you must prefix them with <code>%{?scl:<replaceable>macro</replaceable>}</code>, as in the following example:</para>
    <programlisting language="RPM Spec">%{?scl:Requires:%scl_runtime}</programlisting>
    <para>In the example above, the <code>%scl_runtime</code> macro is the value of the <code>Requires</code> tag. Both the macro and the tag use the <code>%{?scl:</code> prefix.</para>
    <section id="sect-Macros_Specific_to_a_Software_Collection">
      <title>Macros Specific to a &DSCL;</title>
      <para>The table below shows a list of all macros specific to a particular &DSCL;.</para>
      <table>
        <title>&DSCL; Specific Macros</title>
        <tgroup cols="3">
          <colspec colname="col_0"/>
          <colspec colname="col_1"/>
          <colspec colname="col_2"/>
          <thead>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>Macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Description</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Example value</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_name</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the &DSCL; </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the &DSCL; with a dash appended at the end</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1-</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%pkg_name</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the original package </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>perl</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>root of the &DSCL; (not package's root) </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_scripts</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>location of &DSCL;'s scriptlets </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/software_collection_1/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_root</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>installation root (install-root) of the package </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/software_collection_1/root/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_require_package software_collection_1 package_2</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>depend on a particular package from a specific &DSCL;</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1-package_2</code>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-Macros_Not_Specific_to_a_Software_Collection">
      <title>Macros Not Specific to a &DSCL;</title>
      <para>The table below shows a list of macros that are not specific to a particular &DSCL;. Because these macros are not relocated and do not point to the &DSCL; file system, they allow you to point to the system root file system. These macros use <code>_root</code> as a prefix.</para>
      <table>
        <title>&DSCL; Non-Specific Macros</title>
        <tgroup cols="4">
          <colspec colname="col_0"/>
          <colspec colname="col_1"/>
          <colspec colname="col_2"/>
          <thead>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>Macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Description</para>
              </entry>              
              <entry colsep="1" rowsep="1">
                <para>Relocated</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Example value</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_prefix</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_exec_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_exec_prefix</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_bindir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_bindir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/bin/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sbindir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sbindir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/sbin/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_datadir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_datadir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sysconfdir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sysconfdir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/etc/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_libexecdir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_libexecdir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/libexec/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sharedstatedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sharedstatedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
             <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/com/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_localstatedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_localstatedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/var/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_includedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_includedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
             <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/include/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_infodir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_infodir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/info/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_mandir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_mandir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/man/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_initddir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_initddir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/etc/rc.d/init.d/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para> %<code>_root_libdir</code> </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_libdir</code> macro, this macro does not work if &DSCL;'s metapackage is platform-independent</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/lib/</code>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section id="sect-Converting_a_Conventional_Spec_File">
    <title>Converting a Conventional Spec File</title>
        <para>The following steps show how to convert a conventional spec file into a &DSCL; spec file so that the &DSCL; spec file that you can use in both the conventional package and the &DSCL;.<!--To allow this option, a special macro usage needs to be followed while writing or converting a package for Software Collection.
Software Collection macros simply relocate package to non-conflicting namespaced path by redefining essential build macros such as %_bindir, %_sysconfdir, etc. and adding Software Collection specific virtual provides. With this concept the Software Collection specific actions in spec file need to be put into the %{?scl: <something> } constructs. --></para>
      <procedure>
        <title>Converting a Conventional Spec File into a &DSCL; Spec File</title>
        <step>
          <para>Add the <code>%scl_package</code> macro to the spec file. Place the macro in front of the spec file preamble as follows:</para>
          <programlisting language="RPM Spec">%{?scl:%scl_package <replaceable>package_name</replaceable>}</programlisting>
        </step>
        <step>
        <para>You are advised to define the <varname>%pkg_name</varname> macro in the spec file in case the package is not built for the &DSCL;:</para>
        <programlisting language="RPM Spec">%{!?scl:%global pkg_name %{name}}</programlisting>
        <para>Consequently, you can use the <varname>%pkg_name</varname> macro to define the original name of the package wherever it is needed in the spec file that you can then use for building both the conventional package and the &DSCL;.</para>
        </step>
        <step>
          <para>Change the <code>Name</code> tag in the spec file preamble as follows:</para>
          <programlisting language="RPM Spec">Name: %{?scl_prefix}<replaceable>package_name</replaceable></programlisting>
        </step>
        <step>
          <para>To check that all essential &DSCL;'s packages are dependencies of the main metapackage, add the following macro after the <code>BuildRequires</code> or <code>Requires</code> tags in the spec file:</para>
          <programlisting language="RPM Spec">%{?scl:Requires: %scl_runtime}</programlisting>
        </step>
        <step>
        	<para>
        		Prefix the <code language="RPM Spec">Obsoletes</code>, <code language="RPM Spec">Conflicts</code> and <code language="RPM Spec">BuildConflicts</code> tags with <code language="RPM Spec">%{?scl_prefix}</code>. This is to ensure that the &DSCL; can be used to deploy new packages to older systems without having the packages specified, for example, by <code language="RPM Spec">Obsolete</code> removed from the base system installation. For example:
        	</para>
        	<programlisting language="RPM Spec">Obsoletes: %{?scl_prefix}lesspipe &lt; 1.0</programlisting>
        </step>
        <step>
        	<para>
        		Prefix the <code language="RPM Spec">Provides</code> tag with <code language="RPM Spec">%{?scl_prefix}</code>, as in the following example:
        	</para>
        	<programlisting language="RPM Spec">Provides: %{?scl_prefix}more</programlisting>
        </step>
        <step>
        	<para>
        		For any subpackages that define their name with the <option>-n</option> option, prefix their name with <code language="RPM Spec">%{?scl_prefix}</code>, as in the following example:
        	</para>
        	<programlisting language="RPM Spec">%package -n %{?scl_prefix}more</programlisting>
        </step>
        <step>
          <para>Add or edit the <code>%setup</code> macro in the <code>%prep</code> section of the spec file so that the macro can deal with a different package name in the &DSCL; environment:</para>
          <programlisting language="RPM Spec">%setup -q -n %{pkg_name}-%{version}</programlisting>
          <para>
            Note that the <code>%setup</code> macro is required and that you must always use the macro with the <option>-n</option> option to successfully build your &DSCL;.
          </para>
        </step>
        <!--<step>
        	<para>
        		If you are using any of the <code language="RPM Spec">%_root_</code> macros to point to the system file system hierarchy, you must use conditionals for these macros so that you can then use the spec file for building both the conventional package and the &DSCL;. Edit the macros as in the following example:
        	</para>
        	<programlisting language="RPM Spec">mkdir -p %{?scl:%_root_sysconfdir}%{?!scl:%_sysconfdir}</programlisting>
        </step>-->
              </procedure>
       <bridgehead id="bh-Example_of_the_Converted_Spec_File">Example of the Converted Spec File</bridgehead>
<para>To see what the diff file comparing a conventional spec file with a converted spec file looks like, see the following example:</para>
      <programlisting language="RPM Spec">--- a/less.spec
+++ b/less.spec
@@ -1,10 +1,13 @@
+%{?scl:%scl_package less}
+%{!?scl:%global pkg_name %{name}}
+
 Summary: A text file browser similar to more, but better
-Name: less
+Name: %{?scl_prefix}less
 Version: 444
 Release: 7%{?dist}
 License: GPLv3+
 Group: Applications/Text
-Source: http://www.greenwoodsoftware.com/less/%{name}-%{version}.tar.gz
+Source: http://www.greenwoodsoftware.com/less/%{pkg_name}-%{version}.tar.gz
 Source1: lesspipe.sh
 Source2: less.sh
 Source3: less.csh
@@ -19,6 +22,7 @@ URL: http://www.greenwoodsoftware.com/less/
 Requires: groff
 BuildRequires: ncurses-devel
 BuildRequires: autoconf automake libtool
-Obsoletes: lesspipe &lt; 1.0
+Obsoletes: %{?scl_prefix}lesspipe &lt; 1.0
+%{?scl:Requires: %scl_runtime}
 
 %description
 The less utility is a text file browser that resembles more, but has
@@ -31,7 +35,7 @@ You should install less because it is a basic utility for viewing text
 files, and you'll use it frequently.
 
 %prep
-%setup -q
+%setup -q -n %{pkg_name}-%{version}
 %patch1 -p1 -b .Foption
 %patch2 -p1 -b .search
 %patch4 -p1 -b .time
@@ -51,16 +55,16 @@ make CC="gcc $RPM_OPT_FLAGS -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOU
 %install
 rm -rf $RPM_BUILD_ROOT
 make DESTDIR=$RPM_BUILD_ROOT install
-mkdir -p $RPM_BUILD_ROOT/etc/profile.d
+mkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
 install -p -c -m 755 %{SOURCE1} $RPM_BUILD_ROOT/%{_bindir}
-install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT/etc/profile.d
-install -p -c -m 644 %{SOURCE3} $RPM_BUILD_ROOT/etc/profile.d
-ls -la $RPM_BUILD_ROOT/etc/profile.d
+install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
+install -p -c -m 644 %{SOURCE3} $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
+ls -la $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
 
 %files
 %defattr(-,root,root,-)
 %doc LICENSE
-/etc/profile.d/*
+%{_sysconfdir}/profile.d/*
 %{_bindir}/*
 %{_mandir}/man1/*
 </programlisting>
  </section>
  <section id="sect-Uninstalling_all_Software_Collection_directories">
    <title>Uninstalling all &DSCL; directories</title>
    <para>
    	Keep in mind that the <command>yum remove</command> command does not uninstall directories provided by those &DSCL; packages and subpackages that are removed after the &DSCL; <package>runtime</package> subpackage is removed.
    </para>
    	<para>
    		To ensure that all directories are uninstalled, make those packages and subpackages depend on the <package>runtime</package> subpackage. To do so, add the following line to the spec file of each of those packages and subpackages:
    	</para>
    	<programlisting language="RPM Spec">%{?scl:Requires: %{scl}-runtime}</programlisting>
    	<para>
    		Adding the above line ensures that all directories provided by those packages and subpackages are removed correctly as long as the <package>runtime</package> subpackage does not depend on any of those packages and subpackages.
    	</para>
  </section>
  <section id="sect-Using_a_Software_Collection_in_Your_Application">
    <title>Making a &DSCL; Depend on Another &DSCL;</title>
<para>To make one &DSCL; depend on a package from another &DSCL;, you need to adjust the <code>BuildRequires</code> and <code>Requires</code> tags in the dependent &DSCL;'s spec file so that these tags properly define the dependency.</para>
<para>For example, to define dependencies on two &DSCL;s named <application>software_collection_1</application> and <application>software_collection_2</application>, add the following three lines to your application's spec file:</para>
<programlisting language="RPM Spec">BuildRequires: scl-utils-build
Requires: %scl_require <replaceable>software_collection_1</replaceable>
Requires: %scl_require <replaceable>software_collection_2</replaceable>
</programlisting>
  <para>
  	Ensure that the spec file also contains the <code>%scl_package</code> macro in front of the spec file preamble, for example:
  </para>
  <programlisting language="RPM Spec">%{?scl:%scl_package <replaceable>less</replaceable>}</programlisting>
  <para>
  	Note that the <code>%scl_package</code> macro must be included in every spec file of your &DSCL;.
  </para>
  <para>
  	You can also use the <code>%scl_require_package</code> macro to define dependencies on a particular package from a specific &DSCL;, as in the following example:
  </para>
  <programlisting language="RPM Spec">BuildRequires: scl-utils-build
Requires: %scl_require_package <replaceable>software_collection_1</replaceable> <replaceable>package_name</replaceable></programlisting>
  </section>
  <section id="sect-Building_a_Software_Collection_Locally">
    <title>Building a &DSCL;</title>
    <para>To build a &DSCL; on your system, run the following command:</para>
    <synopsis>
      <command>rpmbuild -ba <replaceable>package</replaceable>.spec --define 'scl <replaceable>name</replaceable>'</command>
    </synopsis>
    <para>The difference between the command shown above and the standard command to build conventional packages (<command>rpmbuild -ba <replaceable>package</replaceable>.spec</command>) is that you have to append the <option>--define</option> option to the <command>rpmbuild</command> command when building a &DSCL;. </para>
    <para>The <option>--define</option> option defines the <code>scl</code> macro, which uses the &DSCL; configured in the &DSCL; spec file (<filename><replaceable>package</replaceable>.spec</filename>).</para>
  <section id="sect-Rebuilding_a_Software_Collection_without_build_subpackages">
  	<title>Rebuilding a &DSCL; without build Subpackages</title>
  	<para>
  		If you wish to rebuild a &DSCL; that is distributed without build subpackages (<package>software_collection-build</package>) and you do not want or cannot use the <command>rpmbuild -ba <replaceable>package</replaceable>.spec --define 'scl <replaceable>name</replaceable>'</command> command to build the &DSCL;, you can have the build subpackages created by rebuilding the &DSCL; metapackage. Note that you need to have the <package>scl-utils-build</package> package installed on your system, otherwise rebuilding the &DSCL; metapackage with the <command>rpmbuild</command> command will fail.
  	</para>
  </section>
  </section>
</chapter>
