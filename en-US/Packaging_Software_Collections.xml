<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Packaging_Software_Collections">
  <title>Packaging &DSCL;s</title>
  <para>This chapter introduces you to packaging &DSCL;s.</para>
  <section id="Creating_Your_Own_Software_Collections">
  	<title>Creating Your Own &DSCL;s</title>
  	<para>In general, you can use one of the following two approaches to deploy an application that depends on an existing &DSCL;:
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>
  				install all required Software Collections and packages manually and then deploy your application, or
  			</para>
  		</listitem>
  		<listitem>
  			<para>
  				create a new Software Collection for your application.
  			</para>
  		</listitem>
  	</itemizedlist>
  	<variablelist>
  	<title>When creating a new &DSCL; for your application:</title>
  	<varlistentry>
  		<term>Create a &DSCL; metapackage</term>
  		<listitem>
  			<para>
  				Each &DSCL; includes a metapackage, which installs a subset of the &DSCL;'s packages that are essential for the user to perform most common tasks with the &DSCL;. See <xref linkend="sect-Meta_Package" /> for more information on creating metapackages.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Consider specifying the location of the &DSCL; root directory</term>
  		<listitem>
  			<para>
  				You are advised to specify the location of the &DSCL; root directory by setting the <code>%_scl_prefix</code> macro in the &DSCL; spec file. For more information, see <xref linkend="sect-The_Software_Collection_Root_Directory" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Consider prefixing the name of your &DSCL; packages</term>
  		<listitem>
  			<para>
  				You are advised to prefix the name of your &DSCL; packages with the vendor and &DSCL;'s name. For more information, see <xref linkend="sect-The_Software_Collections_Prefix" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Specify all &DSCL;s and other packages required by your application as dependencies</term>
  		<listitem>
  			<para>
  				Ensure that all &DSCL;s and other packages required by your application are specified as dependencies of your &DSCL;. For more information, see <xref linkend="sect-Using_a_Software_Collection_in_Your_Application" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Convert existing conventional packages or create new &DSCL; packages</term>
  		<listitem>
  			<para>
  				Ensure that all macros in your &DSCL; package spec files use conditionals. See <xref linkend="sect-Converting_a_Conventional_Spec_File" /> for more information on how to convert an existing package spec file.
  			</para>
  		</listitem>
  	</varlistentry>
  	<varlistentry>
  		<term>Build your &DSCL;</term>
  		<listitem>
  			<para>
  				After you create the &DSCL; metapackage and convert or create packages for your &DSCL;, you can build the &DSCL; with the <application>rpmbuild</application> utility. For more information, see <xref linkend="sect-Building_a_Software_Collection_Locally" />.
  			</para>
  		</listitem>
  	</varlistentry>
  	</variablelist>
  </section>
  <section id="sect-The_File_System_Hierarchy">
    <title>The File System Hierarchy</title>
    <para>The root directory of &DSCL;s is normally located in the <filename>/&OPT;/</filename> directory to avoid possible conflicts between &DSCL;s and the base system installation. The use of the <filename>/&OPT;/</filename> directory is recommended by the Filesystem Hierarchy Standard (FHS).</para>
    <para>Below is an example of the file system hierarchy layout with two &DSCL;s, <replaceable>software_collection_1</replaceable> and <replaceable>software_collection_2</replaceable>:</para>
    <figure float="0" id="fig-The_File_System_Hierarchy">
      <title>The &DSCL; File System Hierarchy</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scl-fs-hierarchy.png" format="PNG" />
          </imageobject>
      </mediaobject>
    </figure>
    <para>As you can see above, each of the &DSCL;s directories contains the &DSCL; root directory, and one or more &DSCL; scriptlets. For more information on the &DSCL; scriptlets, refer to <xref linkend="sect-Software_Collection_Scriptlets"/>.</para>
    </section>
    <section id="sect-The_Software_Collection_Root_Directory">
    	<title>The &DSCL; Root Directory</title>
    <para>You can change the location of the root directory by setting the <code>%_scl_prefix</code> macro in the spec file, as in the following example:</para>
    <programlisting language="RPM Spec">%global _scl_prefix /opt/<replaceable>provider</replaceable></programlisting>
    <para>where <replaceable>provider</replaceable> is the provider (vendor) name registered, where applicable, with the Linux Foundation and the subordinated Linux Assigned Names and Numbers Authority (LANANA), in conformance with the Filesystem Hierarchy Standard.</para>
    <para>Each organization or project that builds and distributes &DSCL;s should use its own provider name, which conforms to the Filesystem Hierarchy Standard (FHS) and avoids possible conflicts between &DSCL;s and the base system installation.</para>
    <para>You are advised to make the file system hierarchy conform to the following layout:</para>
    <programlisting>/opt/<replaceable>provider</replaceable>/<replaceable>prefix-application-version</replaceable>/</programlisting>
		<note>
		<para>You must define the <code>_scl_prefix</code> macro above the <code>%scl_package</code> macro in the spec file.</para>
		</note>
    <para>For more information on the Filesystem Hierarchy Standard, see <ulink url="http://www.pathname.com/fhs/">http://www.pathname.com/fhs/</ulink>.</para>
    <para>For more information on the Linux Assigned Names and Numbers Authority, see <ulink url="http://www.lanana.org/">http://www.lanana.org/</ulink>.</para>
    </section>
  <section id="sect-The_Software_Collections_Prefix">
  	<title>The &DSCL; Prefix</title>
  	<para>
  		When naming your &DSCL;, you are advised to prefix the name of your &DSCL; as described below in order to avoid possible name conflicts with the system versions of the packages that are part of your &DSCL;.
  	</para>
  	<para>
  		The &DSCL; prefix consists of two parts: 
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>
  				the <replaceable>provider</replaceable> part, which defines the provider's name, and
			</para>
		</listitem>
		<listitem>
			<para>
				the name of the &DSCL; itself.
			</para>
		</listitem>
  	</itemizedlist>
  	<para>These two parts of the &DSCL; prefix are separated by a dash (<literal>-</literal>), as in the following example:</para>
	<programlisting>myorganization-ruby193</programlisting>
	<para>In this example, <replaceable>myorganization</replaceable> is the provider's name, and <replaceable>ruby193</replaceable> is the name of the &DSCL;.</para>
	<para>While it is ultimately a vendor's or distributor's decision whether to specify the provider's name in the prefix or not, specifying it is highly recommended.</para>
	<para>A notable exception are &DSCL;s which were first shipped with Red Hat Software Collections 1.x, they do not specify the provider's name in their prefixes. Newer &DSCL;s added in Red Hat Software Collections 2.0 and later use <literal>rh</literal> as the provider's name. For example:</para>
	<programlisting>rh-ruby23</programlisting>
	</section>
	<section id="sect-Software_Collection_Package_Names">
		<title>&DSCL; Package Names</title>
  	<para>
  		The &DSCL; package name consists of two parts: 
  	</para>
  	<itemizedlist>
  		<listitem>
  			<para>
  				the <replaceable>prefix</replaceable> part, discussed in <xref linkend="sect-The_Software_Collections_Prefix" />, and
			</para>
		</listitem>
		<listitem>
			<para>
				the name and version number of the application that is a part of the &DSCL;.
			</para>
		</listitem>
  	</itemizedlist>
  	<para>These two parts of the &DSCL; package name are separated by a dash (<literal>-</literal>), as in the following example:</para>
	<programlisting>myorganization-ruby193-foreman-1.1</programlisting>
	<para>In this example, <replaceable>myorganization-ruby193</replaceable> is the prefix, and <replaceable>foreman-1.1</replaceable> is the name and version number of the application.</para>
    </section>
  <section id="sect-Software_Collection_Scriptlets">
    <title>&DSCL; Scriptlets</title>
    <para>The &DSCL; scriptlets are simple shell scripts that change the current system environment so that the group of packages in the &DSCL; is preferred over the corresponding group of conventional packages installed on the system.</para>
    <para>To utilize the &DSCL; scriptlets, use the <application>scl</application> tool that is part of the <package>scl-utils</package> package. For more information on <application>scl</application>, refer to <xref linkend="sect-Enabling_the_Software_Collection"/>.</para>
    <para>
      A single &DSCL; can include multiple &DSCL; scriptlets. These scriptlets are located in the <filename>/&OPT;/&RH;/software_collection/</filename> directory in your &DSCL; package. If you only need to distribute a single scriptlet in your &DSCL;, it is highly recommended that you use <filename>enable</filename> as the name for that scriptlet. When the user runs a command in the &DSCL; environment by executing <command>scl enable <replaceable>software_collection</replaceable> <replaceable>command</replaceable></command>, the <filename>/&OPT;/&RH;/software_collection/enable</filename> scriptlet is then used to update search paths, and so on.
    </para>
    <para>
      Note that &DSCL; scriptlets can only set the system environment in a subshell that is created by running the <command>scl enable</command> command. The subshell is only active for the time the command is being performed.
    </para>
  </section>
  <section id="sect-Package_Layout">
    <title>Package Layout</title>
    <para>Each &DSCL;'s layout consists of the metapackage, which installs a subset of other packages, and a number of the &DSCL;'s packages, which are installed within the &DSCL; namespace.</para>
    <section id="sect-Meta_Package">
      <title>Metapackage</title>
      <para>Each &DSCL; includes a metapackage, which installs a subset of the &DSCL;'s packages that are essential for the user to perform most common tasks with the &DSCL;. For example, the essential packages can provide the Perl language interpreter, but no Perl extension modules. The metapackage contains a basic file system hierarchy and delivers a number of the &DSCL;'s scriptlets.</para>
      <para>The purpose of the metapackage is to make sure that all essential packages in the &DSCL; are properly installed and that it is possible to enable the &DSCL;.</para>
      <para>The metapackage produces the following packages that are also part of the &DSCL;:</para>
      <variablelist>
        <varlistentry>
          <term>The main package: <replaceable>%name</replaceable></term>
          <listitem>
            <para>The main package in the &DSCL; contains dependencies of the base packages, which are included in the &DSCL;. The main package does not contain any files.</para>
            <para>When specifying dependencies for your &DSCL;'s packages, ensure that no other package in your &DSCL; depends on the main package. The purpose of the main package is to install only those packages that are essential for the user to perform most common tasks with the &DSCL;.</para>
            <para>Normally, the main package does not specify any build time dependencies (for instance, packages that are only build time dependencies of another &DSCL;'s packages).</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization-ruby193</literal>, then the main package macro is expanded to:</para>
            <programlisting>myorganization-ruby193</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The runtime subpackage: <replaceable>%name</replaceable>-runtime</term>
          <listitem>
            <para>The runtime subpackage in the &DSCL; owns the &DSCL;'s file system and delivers the &DSCL;'s scriptlets. This package needs to be installed for the user to be able to use the &DSCL;.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization-ruby193</literal>, then the runtime subpackage macro is expanded to:</para>
            <programlisting>myorganization-ruby193-runtime</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The build subpackage: <replaceable>%name</replaceable>-build</term>
          <listitem>
            <para>The build subpackage in the &DSCL; delivers the &DSCL;'s build configuration. It contains RPM macros needed for building packages into the &DSCL;. The build subpackage is optional and can be excluded from the &DSCL;.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization-ruby193</literal>, then the build subpackage macro is expanded to:</para>
            <programlisting>myorganization-ruby193-build</programlisting>
          <para>The contents of the <literal>myorganization-ruby193-build</literal> subpackage are shown below:</para>
          <screen><computeroutput>$ </computeroutput><userinput>cat /etc/rpm/macros.ruby193-config</userinput>
%scl myorganization-ruby193</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The syspaths subpackage: <replaceable>%name</replaceable>-syspaths</term>
          <listitem>
            <para>The syspaths subpackage in the &DSCL; provides an optional way to install convenient shell wrappers and symbolic links into the standard path, thus altering the base system installation, but making binary files in the &DSCL; packages easier to use.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization-ruby193</literal>, then the syspaths subpackage macro is expanded to:</para>
            <programlisting>myorganization-ruby193-syspaths</programlisting>
            <para>For more information about the syspaths subpackage, see <xref linkend="sect-Providing_syspaths_Subpackages" />.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The scldevel subpackage: <replaceable>%name</replaceable>-scldevel</term>
          <listitem>
            <para>The scldevel subpackage in the %name &DSCL; contains development files, which are useful when developing packages of another &DSCL; that depends on the %name &DSCL;. The scldevel subpackage is optional and can be excluded from the %name &DSCL;.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization-ruby193</literal>, then the scldevel subpackage macro is expanded to:</para>
            <programlisting>myorganization-ruby193-scldevel</programlisting>
            <para>For more information about the scldevel subpackage, see <xref linkend="sect-Providing_an_scldevel_Subpackage" />.</para>
          </listitem>
        </varlistentry>
      </variablelist>
</section>
<section id="sect-Creating_a_Meta_Package">
<title>Creating a Metapackage</title>
<itemizedlist>
	<title>When creating a new metapackage:</title>
	<listitem>
	  <para>Define the following macros at the top of the metapackage spec file, above the <code>%scl_package</code> macro:</para>
	  <itemizedlist>
	  <listitem>
	    <para><code>scl_name_prefix</code> that specifies the provider's name to be used as a prefix in your &DSCL;'s name, for example, <replaceable>myorganization</replaceable>-. This is different from <code>_scl_prefix</code>, which specifies the root of your &DSCL; but also uses the provider's name. See <xref linkend="sect-The_Software_Collections_Prefix" /> for more information.</para>
	  </listitem>
	  <listitem>
	    <para><code>scl_name_base</code> that specifies the base name of your &DSCL;, for example, <replaceable>ruby</replaceable>.</para>
	  </listitem>
	  <listitem>
	    <para><code>scl_name_version</code> that specifies the version of your &DSCL;, for example, <replaceable>193</replaceable>.</para>
	  </listitem>
	  </itemizedlist>
	</listitem>
	<listitem>
	  <para>You are advised to define a &DSCL; macro <code>nfsmountable</code> that changes the location of configuration and state files and makes your &DSCL; usable over NFS. For more information, see <xref linkend="sect-Using_Software_Collections_over_NFS" />.</para>
	</listitem>
	<listitem>
		<para>
			Consider specifying all packages in your &DSCL; that are essential for the &DSCL; run time as dependencies of the metapackage. That way you can ensure that the packages are installed with the &DSCL; metapackage.
		</para>
	</listitem>
	<listitem>
		<para>
			You are advised to add <code language="RPM Spec">Requires: scl-utils-build</code> to the <package>build</package> subpackage.
		</para>
	</listitem>
	<listitem>
		<para>
			You are not required to use conditionals for &DSCL;-specific macros in the metapackage.
		</para>
	</listitem>
	<listitem>
		<para> 
			Include any path redefinition that the packages in your &DSCL; may require in the <filename>enable</filename> scriptlet.
		</para>
		<para>
			For information on commonly used path redefinitions, see <xref linkend="sect-Commonly_Used_Path_Redefinitions" />.
		</para>
	</listitem>
	<listitem>
		<para>
		 	Always make sure that the metapackage contains the <command>%setup</command> macro in the <code>%prep</code> section, otherwise building the &DSCL; will fail. If you do not need to use a particular option with the <code>%setup</code> macro, add the  <code language="RPM Spec">%setup -c -T</code> command to the <code>%prep</code> section.
		 	</para>
		 	<para>
		 		This is because the <command>%setup</command> macro defines and creates the <code language="RPM Spec">%buildsubdir</code> directory, which is normally used for storing temporary files at build time. If you do not define <command>%setup</command> in your &DSCL; packages, files in the <code language="RPM Spec">%buildsubdir</code> directory will be overwritten, causing the build to fail.
		 	</para>
	</listitem>
	<listitem>
		<para>
			Add any macros you need to use to the <filename>macros.%{scl}-config</filename> file in the <package>build</package> subpackage.
		</para>
	</listitem>
</itemizedlist>
<bridgehead id="bh-Example_of_the_Meta_Package">Example of the Metapackage</bridgehead>
<para>To get an idea of what a typical metapackage for a &DSCL; named <replaceable>myorganization-ruby193</replaceable> looks like, see the following example:</para>
      <programlisting language="RPM Spec"><![CDATA[%global scl_name_prefix myorganization-
%global scl_name_base ruby
%global scl_name_version 193

%global scl %{scl_name_prefix}%{scl_name_base}%{scl_name_version}

# Optional but recommended: define nfsmountable
%global nfsmountable 1

%global _scl_prefix /opt/myorganization
%scl_package %scl

Summary: Package that installs %scl
Name: %scl_name
Version: 1
Release: 1%{?dist}
License: GPLv2+
Requires: %{scl_prefix}less
BuildRequires: scl-utils-build

%description
This is the main package for %scl Software Collection.

%package runtime
Summary: Package that handles %scl Software Collection.
Requires: scl-utils

%description runtime
Package shipping essential scripts to work with %scl Software Collection.

%package build
Summary: Package shipping basic build configuration
Requires: scl-utils-build

%description build
Package shipping essential configuration macros to build %scl Software Collection.

# This is only needed when you want to provide an optional scldevel subpackage
%package scldevel
Summary: Package shipping development files for %scl

%description scldevel
Package shipping development files, especially useful for development of
packages depending on %scl Software Collection.

%prep
%setup -c -T

%install
%scl_install

cat >> %{buildroot}%{_scl_scripts}/enable << EOF
export PATH="%{_bindir}:%{_sbindir}\${PATH:+:\${PATH}}"
export LD_LIBRARY_PATH="%{_libdir}\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}"
export MANPATH="%{_mandir}:\${MANPATH:-}"
export PKG_CONFIG_PATH="%{_libdir}/pkgconfig\${PKG_CONFIG_PATH:+:\${PKG_CONFIG_PATH}}"
EOF

# This is only needed when you want to provide an optional scldevel subpackage
cat >> %{buildroot}%{_root_sysconfdir}/rpm/macros.%{scl_name_base}-scldevel << EOF
%%scl_%{scl_name_base} %{scl}
%%scl_prefix_%{scl_name_base} %{scl_prefix}
EOF

# Install the generated man page
mkdir -p %{buildroot}%{_mandir}/man7/
install -p -m 644 %{scl_name}.7 %{buildroot}%{_mandir}/man7/

%files

%files runtime -f filelist
%scl_files

%files build
%{_root_sysconfdir}/rpm/macros.%{scl}-config

%files scldevel
%{_root_sysconfdir}/rpm/macros.%{scl_name_base}-scldevel

%changelog
* Fri Aug 30 2013 John Doe &lt;jdoe@example.com&gt; 1-1
- Initial package]]></programlisting>
    </section>
    <!--<section id="sect-Packages_in_the_Software_Collection_Namespace">
      <title>Packages in the &DSCL; Namespace</title>
      <para>Besides the minimal subset of packages installed by the metapackage, the &DSCL; also installs a number of packages that are part of the package collection itself.</para>
      <variablelist>
        <varlistentry>
          <term>&DSCL; package: <replaceable>name</replaceable>-<replaceable>pkgname</replaceable></term>
          <listitem>
            <para>The &DSCL; can contain a number of packages, which are included in the &DSCL; namespace and relocated to the &DSCL;'s file system hierarchy.</para>
            <para>For example, if the name of the &DSCL; is <literal>myorganization-ruby193</literal>, then the &DSCL;'s package name for the <package>ruby-1.9.3.352-2.1.&PKGOS;.x86_64.rpm</package> package is:</para>
            <programlisting>myorganization-ruby193-ruby-1.9.3.352-2.1.&PKGOS;.x86_64.rpm</programlisting>
            <para></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>-->
  </section>
  <section id="sect-Software_Collection_Macros">
    <title>&DSCL; Macros</title>
    <para>The &DSCL; packaging macro <code>scl</code> defines where to relocate the &DSCL;'s file structure. The relocated file structure is a file system used exclusively by the &DSCL;.</para>
    <para>The <code>%scl_package</code> macro defines files ownership for the &DSCL;'s metapackage and provides additional packaging macros to use in the &DSCL; environment.
</para>
    <para>To be able to build a conventional package and a &DSCL; package with a single spec file, prefix the &DSCL; macros with <code>%{?scl:<replaceable>macro</replaceable>}</code>, as in the following example:</para>
    <programlisting language="RPM Spec">%{?scl:Requires: %scl_runtime}</programlisting>
    <para>In the example above, the <code>%scl_runtime</code> macro is the value of the <code>Requires</code> tag. Both the macro and the tag use the <code>%{?scl:</code> prefix.</para>
    <section id="sect-Macros_Specific_to_a_Software_Collection">
      <title>Macros Specific to a &DSCL;</title>
      <para>The table below shows a list of all macros specific to a particular &DSCL;. All the macros have default values that you will not need to change in most cases.</para>
      <table>
        <title>&DSCL; Specific Macros</title>
        <tgroup cols="3">
          <colspec colname="col_0"/>
          <colspec colname="col_1"/>
          <colspec colname="col_2"/>
          <thead>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>Macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Description</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Example value</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_name</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the &DSCL; </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the &DSCL; with a dash appended at the end</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1-</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%pkg_name</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>name of the original package </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>perl</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>root of the &DSCL; (not package's root) </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_scripts</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>location of &DSCL;'s scriptlets </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/software_collection_1/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_scl_root</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>installation root (install-root) of the package </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/&OPT;/&RH;/software_collection_1/root/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%scl_require_package software_collection_1 package_2</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>depend on a particular package from a specific &DSCL;</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>software_collection_1-package_2</code>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-Macros_Not_Specific_to_a_Software_Collection">
      <title>Macros Not Specific to a &DSCL;</title>
      <para>The table below shows a list of macros that are not specific to a particular &DSCL;. Because these macros are not relocated and do not point to the &DSCL; file system, they allow you to point to the system root file system. These macros use <code>_root</code> as a prefix.</para>
      <para>All the macros have default values that you will not need to change in most cases.</para>
      <table>
        <title>&DSCL; Non-Specific Macros</title>
        <tgroup cols="4">
          <colspec colname="col_0"/>
          <colspec colname="col_1"/>
          <colspec colname="col_2"/>
          <thead>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>Macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Description</para>
              </entry>              
              <entry colsep="1" rowsep="1">
                <para>Relocated</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>Example value</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_prefix</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_exec_prefix</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_exec_prefix</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_bindir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_bindir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/bin/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sbindir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sbindir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/sbin/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_datadir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_datadir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sysconfdir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sysconfdir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/etc/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_libexecdir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_libexecdir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/libexec/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_sharedstatedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_sharedstatedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
             <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/com/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_localstatedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_localstatedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/var/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_includedir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_includedir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
             <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/include/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_infodir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_infodir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/info/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_mandir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_mandir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/share/man/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para>
                  <code>%_root_initddir</code>
                </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_initddir</code> macro</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/etc/rc.d/init.d/</code>
                </para>
              </entry>
            </row>
            <row rowsep="1">
              <entry colsep="1" rowsep="1">
                <para> %<code>_root_libdir</code> </para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>&DSCL;'s <code>%_libdir</code> macro, this macro does not work if &DSCL;'s metapackage is platform-independent</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>no</para>
              </entry>
              <entry colsep="1" rowsep="1">
                <para>
                  <code>/usr/lib/</code>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-The_nfsmountable_Macro">
      <title>The nfsmountable Macro</title>
      <para>Using a &DSCL; macro <code>nfsmountable</code> allows you to change values for the <code>_sysconfdir</code>, <code>_sharedstatedir</code>, and <code>_localstatedir</code> macros so that your &DSCL; can have its state files and configuration files located outside the &DSCL;'s <filename>/opt</filename> file system hierarchy. This makes the files easier to manage and is also required when using your &DSCL; over NFS.</para>
      <para>If you do not need support for &DSCL;s over NFS, using <code>nfsmountable</code> is optional but recommended. For more information, see <xref linkend="sect-Using_Software_Collections_over_NFS" />.</para>
    </section>
  </section>
  <section id="sect-Commonly_Used_Path_Redefinitions">
    <title>Commonly Used Path Redefinitions</title>
    <para>This section lists environment variables commonly used to redefine paths in the <filename>enable</filename> scriptlet to set up the &DSCL; environment. They are also used to specify the location of the &DSCL; components in the &DSCL; file system hierarchy.</para>
    <para>Whether you need to specify a path redefinition in the <filename>enable</filename> scriptlet depends on the packages you choose to include in your &DSCL;. The environment variables normally follow this pattern:</para>
    <programlisting language="RPM Spec">$ENV_VAR=$SCL_ENV_VAR:$ENV_VAR</programlisting>
    <section id="sect-Language-specific_Path_Redefinitions">
      <title>Language-specific Path Redefinitions</title>
    <variablelist>
      <varlistentry>
        <term>GEM_PATH</term>
        <listitem>
          <para>The <envar>GEM_PATH</envar> environment variable specifies the location of Ruby gems. As such, it is also used in those &DSCL;s that extend the rh-ruby23 &DSCL;. For more information, see <xref linkend="sect-Extending_the_rh-ruby23_Software_Collections" />.</para>
          <para>Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export GEM_PATH="\${GEM_PATH:=%{gem_dir}:\`scl enable %{scl_ruby} -- ruby -e "print Gem.path.join(':')"\`}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>GOPATH</term>
        <listitem>
          <para>The <envar>GOPATH</envar> environment variable specifies the location of Go source and binary files. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export GOPATH="%{gopath}\${GOPATH:+:\${GOPATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>JAVACONFDIRS</term>
        <listitem>
          <para>The <envar>JAVACONFDIRS</envar> environment variable is used to specify the location of the <filename>java.conf</filename> configuration file. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export JAVACONFDIRS="%{_sysconfdir}/java\${JAVACONFDIRS:+:}\${JAVACONFDIRS:-}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PERL5LIB</term>
        <listitem>
          <para>The <envar>PERL5LIB</envar> environment variable is used to specify the location of custom Perl modules so that they can be installed with the <filename>%{?_scl_root}
</filename> prefix. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export PERL5LIB="%{_scl_root}%{perl_vendorlib}\${PERL5LIB:+:\${PERL5LIB}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PYTHONPATH</term>
        <listitem>
          <para>The <envar>PYTHONPATH</envar> environment variable specifies the location of custom Python libraries. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export PYTHONPATH="%{_scl_root}%{python_sitearch}:%{_scl_root}%{python_sitelib}\${PYTHONPATH:+:}\${PYTHONPATH:-}"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    </section>
    <section id="sect-Other_Path_Redefinitions">
    <title>Other Path Redefinitions</title>
    <variablelist>
      <varlistentry>
        <term>CPATH</term>
        <listitem>
          <para>The <envar>CPATH</envar> environment variable specifies include paths for the <application>GCC</application> compiler to use. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export CPATH="%{_includedir}\${CPATH:+:\${CPATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INFOPATH</term>
        <listitem>
          <para>The <envar>INFOPATH</envar> environment variable specifies directories that contain Info files. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export INFOPATH="%{_infodir}\${INFOPATH:+:\${INFOPATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LD_LIBRARY_PATH</term>
        <listitem>
          <para>The <envar>LD_LIBRARY_PATH</envar> environment variable specifies the location of libraries. For more information, see <xref linkend="sect-Software_Collection_Library_Support" />.</para>
          <para>Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export LD_LIBRARY_PATH="%{_libdir}\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LIBRARY_PATH</term>
        <listitem>
          <para>The <envar>LIBRARY_PATH</envar> environment variable specifies the location of special linker files or ordinary libraries for <application>GCC</application> to use. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export LIBRARY_PATH="%{_libdir}\${LIBRARY_PATH:+:\${LIBRARY_PATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>MANPATH</term>
        <listitem>
          <para>The <envar>MANPATH</envar> environment variable specifies the location of man pages. For more information, see <xref linkend="sect-Software_Collection_manpath_Support" />.</para>
          <para>Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export MANPATH="%{_mandir}:\${MANPATH:-}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PATH</term>
        <listitem>
          <para>The <envar>PATH</envar> environment variable specifies the location of binary files. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export PATH="%{_bindir}:%{_sbindir}\${PATH:+:\${PATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PCP_DIR</term>
        <listitem>
          <para>The <envar>PCP_DIR</envar> environment variable specifies the location of files and directories used by <application>PCP</application>. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export PCP_DIR="%{_scl_root}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PKG_CONFIG_PATH</term>
        <listitem>
          <para>The <envar>PKG_CONFIG_PATH</envar> environment variable specifies the location of <filename>.pc</filename> files used by the <application>pkg-config</application> program. For more information, see <xref linkend="sect-Software_Collection_pc_Files_Support" />.</para>
          <para>Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export PKG_CONFIG_PATH="%{_libdir}/pkgconfig\${PKG_CONFIG_PATH:+:\${PKG_CONFIG_PATH}}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>XDG_CONFIG_DIRS</term>
        <listitem>
          <para>The <envar>XDG_CONFIG_DIRS</envar> environment variable specifies the location of desktop configuration files according to the freedesktop.org specification. Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export XDG_CONFIG_DIRS="%{_sysconfdir}/xdg:\${XDG_CONFIG_DIRS:-/etc/xdg}"</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>XDG_DATA_DIRS</term>
        <listitem>
          <para>The <envar>XDG_DATA_DIRS</envar> environment variable specifies the location of desktop data files according to the freedesktop.org specification. It is used in some &DSCL;s to locate the &DSCL;-specific scripts or to enable bash completion.</para>
          <para>Include the following in the <filename>enable</filename> scriptlet to redefine the environment variable:</para>
          <programlisting language="RPM Spec">export XDG_DATA_DIRS="%{_datadir}:\${XDG_DATA_DIRS:-/usr/local/share:%{_root_datadir}}"</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
    </section>
  </section>
  <section id="sect-Converting_a_Conventional_Spec_File">
    <title>Converting a Conventional Spec File</title>
      <para>This section discusses converting a conventional spec file into a &DSCL; spec file so that the converted spec file can be used in both the conventional package and the &DSCL;.<!--To allow this option, a special macro usage needs to be followed while writing or converting a package for Software Collection.
Software Collection macros simply relocate package to non-conflicting namespaced path by redefining essential build macros such as %_bindir, %_sysconfdir, etc. and adding Software Collection specific virtual provides. With this concept the Software Collection specific actions in spec file need to be put into the %{?scl: <something> } constructs. --></para>
      <section id="sect-Example_of_the_Converted_Spec_File">
      <title>Example of the Converted Spec File</title>
      <para>To see what the diff file comparing a conventional spec file with a converted spec file looks like, refer to the following example:</para>
      <programlisting language="RPM Spec">--- a/less.spec
+++ b/less.spec
@@ -1,10 +1,13 @@
+%{?scl:%scl_package less}
+%{!?scl:%global pkg_name %{name}}
+
 Summary: A text file browser similar to more, but better
-Name: less
+Name: %{?scl_prefix}less
 Version: 444
 Release: 7%{?dist}
 License: GPLv3+
 Group: Applications/Text
-Source: http://www.greenwoodsoftware.com/less/%{name}-%{version}.tar.gz
+Source: http://www.greenwoodsoftware.com/less/%{pkg_name}-%{version}.tar.gz
 Source1: lesspipe.sh
 Source2: less.sh
 Source3: less.csh
@@ -19,6 +22,7 @@ URL: http://www.greenwoodsoftware.com/less/
 Requires: groff
 BuildRequires: ncurses-devel
 BuildRequires: autoconf automake libtool
-Obsoletes: lesspipe &lt; 1.0
+Obsoletes: %{?scl_prefix}lesspipe &lt; 1.0
+%{?scl:Requires: %scl_runtime}
 
 %description
 The less utility is a text file browser that resembles more, but has
@@ -31,7 +35,7 @@ You should install less because it is a basic utility for viewing text
 files, and you'll use it frequently.
 
 %prep
-%setup -q
+%setup -q -n %{pkg_name}-%{version}
 %patch1 -p1 -b .Foption
 %patch2 -p1 -b .search
 %patch4 -p1 -b .time
@@ -51,16 +55,16 @@ make CC="gcc $RPM_OPT_FLAGS -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOU
 %install
 rm -rf $RPM_BUILD_ROOT
 make DESTDIR=$RPM_BUILD_ROOT install
-mkdir -p $RPM_BUILD_ROOT/etc/profile.d
+mkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
 install -p -c -m 755 %{SOURCE1} $RPM_BUILD_ROOT/%{_bindir}
-install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT/etc/profile.d
-install -p -c -m 644 %{SOURCE3} $RPM_BUILD_ROOT/etc/profile.d
-ls -la $RPM_BUILD_ROOT/etc/profile.d
+install -p -c -m 644 %{SOURCE2} $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
+install -p -c -m 644 %{SOURCE3} $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
+ls -la $RPM_BUILD_ROOT%{_sysconfdir}/profile.d
 
 %files
 %defattr(-,root,root,-)
 %doc LICENSE
-/etc/profile.d/*
+%{_sysconfdir}/profile.d/*
 %{_bindir}/*
 %{_mandir}/man1/*</programlisting>
      </section>
      <section id="sect-Converting_Tags_and_Macro_Definitions">
      <title>Converting Tags and Macro Definitions</title>
      <para>The following steps show how to convert tags and macro definitions in a conventional spec file into a &DSCL; spec file.</para>
      <procedure>
        <title>Converting tags and macro definitions</title>
        <step>
          <para>Add the <code>%scl_package</code> macro to the spec file. Place the macro in front of the spec file preamble as follows:</para>
          <programlisting language="RPM Spec">%{?scl:%scl_package <replaceable>package_name</replaceable>}</programlisting>
        </step>
        <step>
        <para>You are advised to define the <varname>%pkg_name</varname> macro in the spec file preamble in case the package is not built for the &DSCL;:</para>
        <programlisting language="RPM Spec">%{!?scl:%global pkg_name %{name}}</programlisting>
        <para>Consequently, you can use the <varname>%pkg_name</varname> macro to define the original name of the package wherever it is needed in the spec file that you can then use for building both the conventional package and the &DSCL;.</para>
        </step>
        <step>
          <para>Change the <code>Name</code> tag in the spec file preamble as follows:</para>
          <programlisting language="RPM Spec">Name: %{?scl_prefix}<replaceable>package_name</replaceable></programlisting>
        </step>
        <step>
          <para>
            If you are building or linking with other &DSCL; packages, then prefix the names of those &DSCL; packages in the <code>Requires</code> and <code>BuildRequires</code> tags with <code language="RPM Spec">%{?scl_prefix}</code> as follows:
          </para>
          <programlisting language="RPM Spec">Requires: %{?scl_prefix}ifconfig</programlisting>
          <para>
            When depending on the system versions of packages, you should avoid using versioned <code>Requires</code> or <code>BuildRequires</code>. If you need to depend on a package that could be updated by the system, consider including that package in your &DSCL;, or remember to rebuild your &DSCL; when the system package updates.
          </para>
        </step>
        <step>
          <para>To check that all essential &DSCL;'s packages are dependencies of the main metapackage, add the following macro after the <code>BuildRequires</code> or <code>Requires</code> tags in the spec file:</para>
          <programlisting language="RPM Spec">%{?scl:Requires: %scl_runtime}</programlisting>
        </step>
        <step>
          <para>
            Prefix the <code language="RPM Spec">Obsoletes</code>, <code language="RPM Spec">Conflicts</code> and <code language="RPM Spec">BuildConflicts</code> tags with <code language="RPM Spec">%{?scl_prefix}</code>. This is to ensure that the &DSCL; can be used to deploy new packages to older systems without having the packages specified, for example, by <code language="RPM Spec">Obsolete</code> removed from the base system installation. For example:
          </para>
          <programlisting language="RPM Spec">Obsoletes: %{?scl_prefix}lesspipe &lt; 1.0</programlisting>
        </step>
        <step>
        	<para>
        		Prefix the <code language="RPM Spec">Provides</code> tag with <code language="RPM Spec">%{?scl_prefix}</code>, as in the following example:
        	</para>
        	<programlisting language="RPM Spec">Provides: %{?scl_prefix}more</programlisting>
        </step>
       </procedure>
       </section>
       <section id="sect-Converting_Subpackages">
         <title>Converting Subpackages</title>
         <para>For any subpackages that define their name with the <option>-n</option> option, prefix their name with <code>%{?scl_prefix}</code>, as in the following example:</para>
          <programlisting language="RPM Spec">%package -n %{?scl_prefix}more</programlisting>
         <para>Prefixing applies not only to the <code>%package</code> macro, but also for <code>%description</code> and <code>%files</code>. For example:</para>
         <programlisting language="RPM Spec">%description -n %{?scl_prefix}rubygems
RubyGems is the Ruby standard for publishing and managing third party
libraries.</programlisting>
         <para>In case the subpackage requires the main package, make sure to also adjust the <code>Requires</code> tag in that subpackage so that the tag uses <code>%{?scl_prefix}%{pkg_name}</code>. For example:</para>
         <programlisting language="RPM Spec">Requires: %{?scl_prefix}%{pkg_name} = %{version}-%{release}</programlisting>
       </section>
       <section id="sect-Converting_RPM_Scripts">
         <title>Converting RPM Scripts</title>
         <para>This section describes general rules for converting RPM scripts that can often be found in the <code>%prep</code>, <code>%build</code>, <code>%install</code>, <code>%check</code>, <code>%pre</code>, and <code>%post</code> sections of a conventional spec file.</para>
         <itemizedlist>
         <listitem>
         <para>Replace all occurrences of <code>%name</code> with <code>%pkg_name</code>. Most importantly, this includes adjusting the <code>%setup</code> macro.</para>
         <itemizedlist>
          <listitem>
          <para>Adjust the <code>%setup</code> macro in the <code>%prep</code> section of the spec file so that the macro can deal with a different package name in the &DSCL; environment:</para>
          <programlisting language="RPM Spec">%setup -q -n %{pkg_name}-%{version}</programlisting>
          <para>Note that the <code>%setup</code> macro is required and that you must always use the macro with the <option>-n</option> option to successfully build your &DSCL;.</para>
          </listitem>
         </itemizedlist>
          </listitem>
          <listitem>
          <para>If you are using any of the <code language="RPM Spec">%_root_</code> macros to point to the system file system hierarchy, you must use conditionals for these macros so that you can then use the spec file for building both the conventional package and the &DSCL;. Edit the macros as in the following example:</para>
          <programlisting language="RPM Spec">mkdir -p %{?scl:%_root_sysconfdir}%{?!scl:%_sysconfdir}</programlisting>
          </listitem>
          <listitem>
          <para>When building &DSCL; packages that depend on other &DSCL; packages, it is often important to ensure that the <command>scl enable</command> functionality links properly or run proper binaries, and so on. One of the examples where this is needed is compiling against a &DSCL; library or running an interpreted script with the interpreter in the &DSCL;.</para>
          <para>Wrap the script using the <code>%{?scl:</code> prefix, as in the following example:</para>
          <programlisting language="RPM Spec"><![CDATA[%{?scl:scl enable %scl - << \EOF}
 set -e
 ruby example.rb
 RUBYOPT="-Ilib" ruby bar.rb
 # The rest of the script contents goes here.
%{?scl:EOF}]]></programlisting>
          <para>It is important to specify <code>set -e</code> in the script so that the script behavior is consistent regardless of whether the script is executed in the <command>rpm</command> shell or the <command>scl</command> environment.</para>
          </listitem>
          <listitem>
            <para>Pay attention to any scripts that are executed during the &DSCL; package installation, such as:</para>
              <itemizedlist>
                <listitem>
                  <para><code>%pretrans</code>, <code>%pre</code>,</para>
                </listitem>
                <listitem>
                  <para><code>%post</code>, <code>%postun</code>, <code>%posttrans</code>,</para>
                </listitem>
                <listitem>
                  <para><code>%triggerin</code>, <code>%triggerun</code>, and <code>%triggerpostun</code>.</para>
                </listitem>
              </itemizedlist>
             <para>If you use the <command>scl enable</command> functionality in those scripts, you are advised to start with an empty environment to avoid any unintentional collisions with the base system installation.</para>
             <para>To do so, use <code>env -i -</code> before enabling the &DSCL;, as in the following example:</para>
            <programlisting language="RPM Spec"><![CDATA[%posttrans
%{?scl:env -i - scl enable %{scl} - << \EOF}
%vagrant_plugin_register %{vagrant_plugin_name}
%{?scl:EOF}]]></programlisting>
          </listitem>
          <listitem>
            <para>All hardcoded paths found in RPM scripts must be replaced with proper macros. For example, replace all occurrences of <code>/usr/share</code> with <code>%{_datadir}</code>. This is needed because the <code>$RPM_BUILD_ROOT</code> variable and the <code>%{build_root}</code> macro are not relocated by the <code>scl</code> macro.</para>
          </listitem>
         </itemizedlist>
       </section>
  <section id="sect-Software_Collection_Automatic_Provides_Requires_Filtering_Support">
    <title>&DSCL; Automatic Provides and Requires and Filtering Support</title>
    <!--para>
      Because the scripts generating automatic <code>Provides</code> and <code>Requires</code> do not have specific support for &DSCL;s, you have to remove them and use manually specified <code>Provides</code> and <code>Requires</code> instead.
    </para>
    <section id="">
      <title>Automatic Provides </title>
      <para>
        To remove the automatic <code>Provides</code>, add the following line to your &DSCL; spec file:
      </para>
    </section>
    <section id="">
      <title>Automatic Requires </title>
    </section-->
    <important>
      <para>
        The functionality described in this section is not available in Red Hat Enterprise Linux 6.
      </para>
    </important>
    <para>
      RPM in Red Hat Enterprise Linux 7 features support for automatic <code>Provides</code> and <code>Requires</code> and filtering. For example, for all Python libraries, RPM automatically adds the following <code>Requires</code>:
    </para>
    <programlisting language="RPM Spec">Requires: python(abi) = (version)</programlisting>
    <para>
      As explained in <xref linkend="sect-Converting_a_Conventional_Spec_File" />, you should prefix this <code>Requires</code> with <code language="RPM Spec">%{?scl_prefix}</code> when converting your conventional RPM package:
    </para>
    <programlisting language="RPM Spec">Requires: %{?scl_prefix}python(abi) = (version))</programlisting>
    <para>
      Keep in mind that the scripts searching for these dependencies must sometimes be rewritten for your &DSCL;, as the original RPM scripts are not extensible enough, and, in some cases, filtering is not usable. For example, to rewrite automatic Python <code>Provides</code> and <code>Requires</code>, add the following lines in the <filename>macros.%{scl}-config</filename> macro file:
    </para>
    <programlisting language="RPM Spec">%__python_provides /usr/lib/rpm/pythondeps-scl.sh --provides %{_scl_root} %{scl_prefix}
%__python_requires /usr/lib/rpm/pythondeps-scl.sh --requires %{_scl_root} %{scl_prefix}</programlisting>
    <para>
      The <filename>/usr/lib/rpm/pythondeps-scl.sh</filename> file is based on a <filename>pythondeps.sh</filename> file from the conventional package and adjusts search paths.
    </para>
    <para>
      If there are <code>Provides</code> or <code>Requires</code> that you need to adjust, for example, a <systemitem>pkg_config</systemitem> <code>Provides</code>, there are two ways to do it:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Add the following lines in the <filename>macros.%{scl}-config</filename> macro file so that it applies to all packages in the &DSCL;:
        </para>
        <programlisting language="RPM Spec">%_use_internal_dependency_generator 0
%__deploop() while read FILE; do /usr/lib/rpm/rpmdeps -%{1} ${FILE}; done | /bin/sort -u
%__find_provides /bin/sh -c "%{?__filter_prov_cmd} %{__deploop P} %{?__filter_from_prov}"
%__find_requires /bin/sh -c "%{?__filter_req_cmd}  %{__deploop R} %{?__filter_from_req}"

# Handle pkgconfig's virtual Provides and Requires
%__filter_from_req | %{__sed} -e 's|pkgconfig|%{?scl_prefix}pkgconfig|g'
%__filter_from_prov | %{__sed} -e 's|pkgconfig|%{?scl_prefix}pkgconfig|g'</programlisting>
      </listitem>
      <listitem>
        <para>
          Or, alternatively, add the following lines after tag definitions in every spec file for which you want to filter <code>Provides</code> or <code>Requires</code>: 
        </para>
        <programlisting language="RPM Spec">%{?scl:%filter_from_provides s|pkgconfig|%{?scl_prefix}pkgconfig|g}
%{?scl:%filter_from_requires s|pkgconfig|%{?scl_prefix}pkgconfig|g}
%{?scl:%filter_setup}</programlisting>
      </listitem>
    </itemizedlist>
    <important>
      <para>
        When using filters, you need to pay attention to the automatic dependencies you change. For example, if the conventional package contains <code language="RPM Spec">Requires: pkgconfig(package_1)</code> and <code language="RPM Spec">Requires: pkgconfig(package_2)</code>, and only <package>package_2</package> is included in the &DSCL;, ensure that you do not filter the <code>Requires</code> tag for <package>package_1</package>.
      </para>
    </important>
  </section>
  <section id="sect-Software_Collection_Macro_Files_Support">
  <title>&DSCL; Macro Files Support</title>
  <para>
    In some cases, you may need to ship macro files with your &DSCL; packages. They are located in the <code language="RPM Spec">%{?scl:%{_root_sysconfdir}}%{!?scl:%{_sysconfdir}}/rpm/</code> directory, which corresponds to the <filename>/etc/rpm/</filename> directory for conventional packages. When shipping macro files, ensure that:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            You rename the macro files by appending <filename>.%{scl}</filename> to their names so that they do not conflict with the files from the base system installation.
          </para>
        </listitem>
        <listitem>
          <para>
            The macros in the macro files are either not expanded, or they are using conditionals, as in the following example:
          </para>
          <programlisting language="RPM Spec">%__python2 %{_bindir}/python
%python2_sitelib %(%{?scl:scl enable %scl '}%{__python2} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"%{?scl:'})</programlisting>
        </listitem>
      </itemizedlist>
      <para>
        As another example, there may be a situation where you need to create a &DSCL; <package>mypython</package> that depends on a &DSCL; <package>python26</package>. The <package>python26</package> &DSCL; defines the <code language="RPM Spec">%{__python2}</code> macro as in the above sample. This macro will evaluate to <filename>/&OPT;/&RH;/mypython/root/usr/bin/python2</filename>, but the <filename>python2</filename> binary is only available in the <package>python26</package> &DSCL; (<filename>/&OPT;/&RH;/python26/root/usr/bin/python2</filename>).
      </para>
      <para>
      To be able to build software in the <package>mypython</package> &DSCL; environment, ensure that:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            The <filename>macros.python.python26</filename> macro file, which is a part of the <package>python26-python-devel</package> package, contains the following line:
          </para>
          <programlisting language="RPM Spec">%__python26_python2 /&OPT;/&RH;/python26/root/usr/bin/python2</programlisting>
        </listitem>
        <listitem>
          <para>
            And the macro file in the python26-build subpackage, and also the <package>build</package> subpackage in any depending &DSCL;, contains the following line:
          </para>
          <programlisting language="RPM Spec">%scl_package_override() {%global __python2 %__python26_python2}
</programlisting>
        </listitem>
      </itemizedlist>
      <para>
        This will redefine the <code language="RPM Spec">%{__python2}</code> macro only if the build subpackage from a corresponding &DSCL; is present, which usually means that you want to build software for that &DSCL;.
      </para>
  </section>
       <section id="sect-Software_Collection_Shebang_Support">
         <title>&DSCL; Shebang Support</title>
         <para>A shebang is a sequence of characters at the beginning of a script that is used as an interpreter directive. The shebang is processed by the automatic dependency generator and it points to a certain location, possibly in the system root file system.</para>
         <para>When the automatic dependency generator processes the shebang, it adds dependencies according to the interpreters they point to. From the &DSCL; point of view, there are two types of shebangs:</para>
         <variablelist>
           <varlistentry>
             <term><code>#!/usr/bin/env <replaceable>example</replaceable></code></term>
             <listitem>
             <para>This shebang instructs the <filename>/usr/bin/env</filename> program to run the interpreter.</para>
             <para>The automatic dependency generator will create a dependency on the <command>/usr/bin/env</command> program, as expected.</para>
             <para>If the <envar>$PATH</envar> environment variable is redefined properly in the <filename>enable</filename> scriptlet, the <replaceable>example</replaceable> interpreter is found in the &DSCL; file system hierarchy, as expected.</para>
             <para>You are advised to rewrite the shebang in your &DSCL; package so that the shebang specifies the full path to the interpreter located in the &DSCL; file system hierarchy.</para>
             </listitem>
           </varlistentry>
           <varlistentry>
             <term><code>#!/usr/bin/<replaceable>example</replaceable></code></term>
             <listitem>
             <para>This shebang specifies the direct path to the interpreter.</para>
             <para>The automatic dependency generator will create a dependency on the <filename>/usr/bin/example</filename> interpreter located outside the &DSCL; file system hierarchy. However, when building a package for your &DSCL;, you often want to create a dependency on the <filename>%{?_scl_root}/usr/bin/example</filename> interpreter located in the &DSCL; file system hierarchy.</para>
             <para>Keep in mind that even when you properly redefine the <envar>$PATH</envar> environment variable, this has no effect on what interpreter is used. The system version of the interpreter located outside the &DSCL; file system hierarchy is always used. In most cases, this is not desired.</para>
             <para>If you are using this type of shebang and you want the shebang to point to the &DSCL; file system hierarchy when building your &DSCL; package, use a command like the following:</para>
             <programlisting language="RPM Spec">find %{buildroot} -type f | \
  xargs sed -i -e '1 s"^#!<replaceable>/usr/bin/example</replaceable>"#!%{?_scl_root}<replaceable>/usr/bin/example</replaceable>"'</programlisting>
             <para>where <replaceable>/usr/bin/example</replaceable> is the interpreter you want to use.</para>
             </listitem>
           </varlistentry>
         </variablelist>
       </section>
       <section id="sect-Using_a_Software_Collection_in_Your_Application">
       <title>Making a &DSCL; Depend on Another &DSCL;</title>
       <para>To make one &DSCL; depend on a package from another &DSCL;, you need to adjust the <code>BuildRequires</code> and <code>Requires</code> tags in the dependent &DSCL;'s spec file so that these tags properly define the dependency.</para>
       <para>For example, to define dependencies on two &DSCL;s named <application>software_collection_1</application> and <application>software_collection_2</application>, add the following three lines to your application's spec file:</para>
       <programlisting language="RPM Spec">BuildRequires: scl-utils-build
Requires: %scl_require <replaceable>software_collection_1</replaceable>
Requires: %scl_require <replaceable>software_collection_2</replaceable></programlisting>
       <para>Ensure that the spec file also contains the <code>%scl_package</code> macro in front of the spec file preamble, for example:</para>
       <programlisting language="RPM Spec">%{?scl:%scl_package <replaceable>less</replaceable>}</programlisting>
       <para>Note that the <code>%scl_package</code> macro must be included in every spec file of your &DSCL;.</para>
       <para>You can also use the <code>%scl_require_package</code> macro to define dependencies on a particular package from a specific &DSCL;, as in the following example:</para>
       <programlisting language="RPM Spec">BuildRequires: scl-utils-build
Requires: %scl_require_package <replaceable>software_collection_1</replaceable> <replaceable>package_name</replaceable></programlisting>
       </section>
  </section>
  <section id="sect-Uninstalling_all_Software_Collection_directories">
    <title>Uninstalling All &DSCL; Directories</title>
    <para>
    	Keep in mind that the <command>yum remove</command> command does not uninstall directories provided by those &DSCL; packages and subpackages that are removed after the &DSCL; <package>runtime</package> subpackage is removed.
    </para>
    	<para>
    		To ensure that all directories are uninstalled, make those packages and subpackages depend on the <package>runtime</package> subpackage. To do so, add the following line with the <code>%scl_runtime</code> macro to the spec file of each of those packages and subpackages:
    	</para>
    	<programlisting language="RPM Spec">%{?scl:Requires: %scl_runtime}</programlisting>
    	<para>
    		Adding the above line ensures that all directories provided by those packages and subpackages are removed correctly as long as the <package>runtime</package> subpackage does not depend on any of those packages and subpackages.
    	</para>
  </section>
  <section id="sect-Building_a_Software_Collection_Locally">
    <title>Building a &DSCL;</title>
    <para>If you have correctly converted a conventional spec file for your &DSCL; as documented in <xref linkend="sect-Converting_a_Conventional_Spec_File" />, you will be able to build the resulting package in both the &DSCL; and conventional build roots. Building the converted package in a conventional build root will produce a conventional base system RPM package, while building in a &DSCL; build root that contains <package>%{scl}-build</package> will produce a &DSCL; package.</para>
    <para>To build a &DSCL; on your system, run the following command:</para>
    <synopsis>
      <command>rpmbuild -ba <replaceable>package</replaceable>.spec --define 'scl <replaceable>name</replaceable>'</command>
    </synopsis>
    <para>The difference between the command shown above and the standard command to build conventional packages (<command>rpmbuild -ba <replaceable>package</replaceable>.spec</command>) is that you have to append the <option>--define</option> option to the <command>rpmbuild</command> command when building a &DSCL;. </para>
    <para>The <option>--define</option> option defines the <code>scl</code> macro, which uses the &DSCL; configured in the &DSCL; spec file (<filename><replaceable>package</replaceable>.spec</filename>).</para>
    <para>Alternatively, to be able to use the standard command <command>rpmbuild -ba <replaceable>package</replaceable>.spec</command> to build the &DSCL;, specify the following in the <filename>package.spec</filename> file:</para>
    <programlisting language="RPM Spec">BuildRequires: <replaceable>software_collection</replaceable>-build</programlisting>
    <para>where <replaceable>software_collection</replaceable> is the name of the &DSCL;.</para>
  <section id="sect-Rebuilding_a_Software_Collection_without_build_subpackages">
    <title>Rebuilding a &DSCL; without build Subpackages</title>
    <para>When you want to rebuild a &DSCL; that comes with no build subpackage (<package><replaceable>software_collection</replaceable>-build</package>), you can create the build subpackage by rebuilding the &DSCL; metapackage, and thus avoid using the <command>rpmbuild -ba <replaceable>package</replaceable>.spec --define 'scl <replaceable>name</replaceable>'</command> command.</para>
    <para>Note that you need to have the <package>scl-utils-build</package> package installed on your system, otherwise rebuilding the &DSCL; metapackage with the <command>rpmbuild</command> command will fail.</para>
    <para>For more information about the <package>scl-utils-build</package> package, see <xref linkend="sect-Enabling_Support_for_Software_Collections" />.</para>
  </section>
  <section id="sect-Avoiding_debuginfo_File_Conflicts">
    <title>Avoiding debuginfo File Conflicts</title>
    <para>When you build two &DSCL; packages (or a conventional RPM package and a &DSCL; package) that specify the same <code>Source</code> tag, and thus unpack source files into the same directory underneath the <filename>%_builddir</filename> directory, their <filename>debuginfo</filename> packages will have file conflicts. Due to these conflicts, the user will be unable to install both packages on the same system at the same time.</para>
    <para>To avoid these file conflicts, the spec file of one of the packages has to be altered to unpack its upstream source into a uniquely named top directory. This adds one more directory level to the build tree underneath the <filename>%_builddir</filename> directory. By doing so, the <filename>debuginfo</filename> package generation script produces <filename>debuginfo</filename> files that do not conflict with files from the other <filename>debuginfo</filename> package.</para>
    <para>To see what the diff file comparing an original spec file with an altered spec file looks like, refer to the following example:</para>
    <programlisting language="Diff"><![CDATA[--- a/tbb.spec
+++ b/tbb.spec
@@ -66,11 +66,13 @@ PDF documentation for the user of the Threading Building Block (TBB)
 C++ library.
 
 %prep
-%setup -q -n %{sourcebasename}
+%setup -q -c -n %{name}
+cd %{sourcebasename}
 %patch1 -p1
 %patch2 -p1
 
 %build
+cd %{sourcebasename}
 %{?scl:scl enable %{scl} - << \EOF}
 make %{?_smp_mflags} CXXFLAGS="$RPM_OPT_FLAGS" tbb_build_prefix=obj
 %{?scl:EOF}
@@ -81,6 +83,7 @@ done
 
 %install
 rm -rf $RPM_BUILD_ROOT
+cd %{sourcebasename}
 mkdir -p $RPM_BUILD_ROOT/%{_libdir}
 mkdir -p $RPM_BUILD_ROOT/%{_includedir}
 
@@ -108,20 +111,20 @@ done
 
 %files
 %defattr(-,root,root,-)
-%doc COPYING doc/Release_Notes.txt
+%doc %{sourcebasename}/COPYING %{sourcebasename}/doc/Release_Notes.txt
 %{_libdir}/*.so.2
 
 %files devel
 %defattr(-,root,root,-)
-%doc CHANGES
+%doc %{sourcebasename}/CHANGES
 %{_includedir}/tbb
 %{_libdir}/*.so
 %{_libdir}/pkgconfig/*.pc
 
 %files doc
 %defattr(-,root,root,-)
-%doc doc/Release_Notes.txt
-%doc doc/html
+%doc %{sourcebasename}/doc/Release_Notes.txt
+%doc %{sourcebasename}/doc/html
 
 %changelog
 * Wed Nov 13 2013 John Doe <jdoe@example.com> - 4.1-5.20130314]]></programlisting>
  </section>
  </section>
</chapter>
