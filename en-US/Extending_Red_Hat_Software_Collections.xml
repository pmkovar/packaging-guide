<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Extending_Red_Hat_Software_Collections">
  <title>Extending Software Collections</title>
  <para>This chapter describes extending &DSCL;s.</para>
  <section id="sect-Providing_an_scldevel_Subpackage">
    <title>Providing an scldevel Subpackage</title>
    <para>The purpose of an <package>scldevel</package> subpackage is to make the process of creating dependent &DSCL;s easier by providing a number of generic macro files. Packagers then use these macro files when they are extending existing &DSCL;s. <package>scldevel</package> is provided as a subpackage of your &DSCL;'s metapackage.</para>
    <para>The following section describes creating an <package>scldevel</package> subpackage for two examples of Ruby &DSCL;s, ruby193 and ruby200.</para>
    <procedure>
    <title>Providing your own scldevel subpackage</title>
      <step>
        <para>In your &DSCL;'s metapackage, add the <package>scldevel</package> subpackage by defining its name, summary, and description:</para>
        <programlisting language="RPM Spec">%package scldevel
Summary: Package shipping development files for %scl
Provides: scldevel(%{scl_name_base})

%description scldevel
Package shipping development files, especially useful for development of
packages depending on %scl Software Collection.</programlisting>
      <para>You are advised to use the virtual <code>Provides: scldevel(%{scl_name_base})</code> during the build of packages of dependent &DSCL;s. This will ensure availability of a version of the <code>%{scl_name_base}</code> &DSCL; and its macros, as specified in the following step.</para>
      </step>
      <step>
        <para>In the <code>%install</code> section of your &DSCL;'s metapackage, create the <filename>macros.%{scl_name_base}-scldevel</filename> file that is part of the <package>scldevel</package> subpackage and contains:</para>
        <programlisting language="RPM Spec"><![CDATA[cat >> %{buildroot}%{_root_sysconfdir}/rpm/macros.%{scl_name_base}-scldevel << EOF
%%scl_%{scl_name_base} %{scl}
%%scl_prefix_%{scl_name_base} %{scl_prefix}
EOF]]></programlisting>
    <para>Note that between all &DSCL;s that share the same <code>%{scl_name_base}</code> name, the provided <code>macros.%{scl_name_base}-scldevel</code> files must conflict. This is to disallow installing multiple versions of the <code>%{scl_name_base}</code> &DSCL;s. For example, the <package>ruby193-scldevel</package> subpackage cannot be installed when there is the <package>ruby200-scldevel</package> subpackage installed.</para>
      </step>
    </procedure>
    <section id="sect-Using_an_scldevel_Subpackage_in_a_Dependent_Software_Collection">
    <title>Using an scldevel Subpackage in a Dependent &DSCL;</title>
    <para>To use your <package>scldevel</package> subpackage in a &DSCL; that depends on the ruby200 &DSCL;, update the metapackage of the dependent &DSCL; as described below.</para>
    <procedure>
    <title>Using your own scldevel subpackage in a dependent &DSCL;</title>
    <step>
    <para>Consider adding the following at the beginning of the metapackage's spec file:</para>
    <programlisting language="RPM Spec">%{!?scl_ruby:%global scl_ruby ruby200}
%{!?scl_prefix_ruby:%global scl_prefix_ruby %{scl_ruby}-}</programlisting>
    <para>These two lines are optional. They are only meant as a visual hint that the dependent &DSCL; has been designed to depend on the ruby200 &DSCL;. If there is no other <package>scldevel</package> subpackage available in the  build root, then the <package>ruby200-scldevel</package> subpackage is used as a build requirement.</para>
    <para>You can substitute these lines with the following line:</para>
   <programlisting language="RPM Spec">%{?scl_prefix_ruby}</programlisting>
    </step>
    <step>
   <para>Add the following build requirement to the metapackage:</para>
   <programlisting language="RPM Spec">BuildRequires: %{scl_prefix_ruby}scldevel</programlisting>
   <para>By specifying this build requirement, you ensure that the <package>scldevel</package> subpackage is in the build root and that the default values are not in use. Omitting this package could result in broken requires at the subsequent packages' build time.</para>
    </step>
    <step>
   <para>Ensure that the <code>%package runtime</code> part of the metapackage's spec file includes the following lines:</para>
   <programlisting language="RPM Spec">%package runtime
Summary: Package that handles %scl Software Collection.
Requires: scl-utils
Requires: %{scl_prefix_ruby}runtime</programlisting>
    </step>
    <step>
   <para>Ensure that the <code>%package build</code> part of the metapackage's spec file includes the following lines:</para>
   <programlisting language="RPM Spec">%package build
Summary: Package shipping basic build configuration
Requires: %{scl_prefix_ruby}scldevel</programlisting>
    <para>Specifying <code>Requires: %{scl_prefix_ruby}scldevel</code> ensures that macros are available in all packages of the &DSCL;.</para>
    </step>
    </procedure>
    </section>
  </section>
</chapter>
