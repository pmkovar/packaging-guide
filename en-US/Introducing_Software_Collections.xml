<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Introducing_Software_Collections">
  <title>Introducing &DSCL;s</title>
  <para>This chapter introduces you to the concept and usage of &DSCL;s or SCLs for short.</para>
       <section id="sect-Why_to_Package_Software_with_RPM">
       <title>Why Package Software with RPM?</title>
   <para>The RPM Package Manager (RPM) is a package management system that runs on Enterprise Linux and Fedora. RPM makes it easier for you to distribute, manage, and update software that you create for Enterprise Linux and Fedora. Many software vendors distribute their software via a conventional archive file (such as a tarball). However, there are several advantages in packaging software into RPM packages. These advantages are outlined below.</para>
    <variablelist>
    <title>With RPM, you can:</title>
    <varlistentry>
     <term>Install, reinstall, remove, upgrade and verify packages.</term>
      <listitem><para>Users can use standard package management tools (for example <application>Yum</application> or <application>PackageKit</application>) to install, reinstall, remove, upgrade and verify your RPM packages.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term>Use a database of installed packages to query and verify packages.</term>
      <listitem><para>Because RPM maintains a database of installed packages and their files, users can easily query and verify packages on their system.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term>Use metadata to describe packages, their installation instructions, and so on.</term>
      <listitem><para>Each RPM package includes metadata that describes the package's components, version, release, size, project URL, installation instructions, and so on.</para></listitem>
          </varlistentry>
    <varlistentry>
     <term>Package pristine software sources into source and binary packages.</term>
      <listitem><para>RPM allows you to take pristine software sources and package them into source and binary packages for your users. In source packages, you have the pristine sources along with any patches that were used, plus complete build instructions. This design eases the maintenance of the packages as new versions of your software are released.</para></listitem>
      </varlistentry>
    <varlistentry>
     <term>Add packages to Yum repositories.</term>
      <listitem><para>You can add your package to a <application>Yum</application> repository that enables clients to easily find and deploy your software.</para></listitem>
      </varlistentry>
    <varlistentry>
     <term>Digitally sign your packages.</term>
      <listitem><para>Using a GPG signing key, you can digitally sign your package so that users are able to verify the authenticity of the package.</para></listitem>
      </varlistentry>
    </variablelist>
    <para>For in-depth information on what is RPM and how to use it, see the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html">Red Hat Enterprise Linux 7 System Administrator's Guide</ulink>, or the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/index.html">Red Hat Enterprise Linux 6 Deployment Guide</ulink>.</para>
    </section>
  <section id="sect-What_Are_Software_Collections">
    <title>What Are &DSCL;s?</title>
    <para>With &DSCL;s, you can build and concurrently install multiple versions of the same software components on your system. &DSCL;s have no impact on the system versions of the packages installed by any of the conventional RPM package management utilities.</para>
    <variablelist>
    <title>&DSCL;s:</title>
      <varlistentry>
        <term>Do not overwrite system files</term>
        <listitem>
          <para>&DSCL;s are distributed as a set of several components, which provide their full functionality without overwriting system files.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Are designed to avoid conflicts with system files</term>
        <listitem>
          <para>&DSCL;s make use of a special file system hierarchy to avoid possible conflicts between a single &DSCL; and the base system installation.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Require no changes to the RPM package manager</term>
        <listitem>
          <para>&DSCL;s require no changes to the RPM package manager present on the host system.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Need only minor changes to the spec file</term>
        <listitem>
          <para>To convert a conventional package to a single &DSCL;, you only need to make minor changes to the package spec file.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Allow you to build a conventional package and a &DSCL; package with a single spec file</term>
        <listitem>
          <para>With a single spec file, you can build both the conventional package and the &DSCL; package.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Uniquely name all included packages</term>
        <listitem>
          <para>With &DSCL;'s namespace, all packages included in the &DSCL; are uniquely named.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Do not conflict with updated packages</term>
        <listitem>
          <para>&DSCL;'s namespace ensures that updating packages on your system causes no conflicts.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Can depend on other &DSCL;s</term>
        <listitem>
          <para>Because one &DSCL; can depend on another, you can define multiple levels of dependencies.
</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
<section id="sect-Enabling_Support_for_Software_Collections">
<title>Enabling Support for &DSCL;s</title>
<para>To enable support for &DSCL;s on your system so that you can enable and build &DSCL;s, you need to have installed the packages <package>scl-utils</package> and <package>scl-utils-build</package>.</para>
<para>If the packages <package>scl-utils</package> and <package>scl-utils-build</package> are not already installed on your system, you can install them by typing the following at a shell prompt as root:</para>
<screen><computeroutput># </computeroutput><userinput>yum install scl-utils scl-utils-build</userinput></screen>
<para>The <package>scl-utils</package> package provides the <application>scl</application> tool that lets you enable &DSCL;s on your system. For more information on enabling &DSCL;s, see <xref linkend="sect-Enabling_the_Software_Collection"/>.</para>
<para>The <package>scl-utils-build</package> package provides macros that are essential for building &DSCL;s. For more information on building &DSCL;s, see <xref linkend="sect-Building_a_Software_Collection_Locally"/>.</para>
</section>
  <section id="sect-Installing_a_Software_Collection">
    <title>Installing a &DSCL;</title>
    <para>To ensure that a &DSCL; is on your system, install the so-called metapackage of the &DSCL;. Thanks to &DSCL;s being fully compatible with the RPM Package Manager, you can use conventional tools like <application>Yum</application> or <application>PackageKit</application> for this task.
    </para>
    <para>For example, to install a &DSCL; with the metapackage named <code>software_collection_1</code>, run the following command:</para>
    <screen><computeroutput># </computeroutput><userinput>yum install software_collection_1</userinput></screen>
    <para>This command will automatically install all the packages in the &DSCL; that are essential for the user to perform most common tasks with the &DSCL;.</para>
    <para>&DSCL;s allow you to only install a subset of packages you intend to use. For example, to use the Ruby interpreter from the rh-ruby23 &DSCL;, you only need to install a package <package>rh-ruby23-ruby</package> from that &DSCL;.</para>
    <para>If you install an application that depends on a &DSCL;, that &DSCL; will be installed along with the rest of the application's dependencies.</para>
    <para>
    	For detailed information on &DSCL; metapackages, see <xref linkend="sect-Meta_Package" />.
    </para>
<para>For detailed information on <application>Yum</application> and <application>PackageKit</application> usage, see the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html">Red Hat Enterprise Linux 7 System Administrator's Guide</ulink>, or the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/index.html">Red Hat Enterprise Linux 6 Deployment Guide</ulink>.</para>
  </section>
  <section id="sect-Listing_Installed_Software_Collections">
    <title>Listing Installed &DSCL;s</title>
    <para>To get a list of &DSCL;s that are installed on the system, run the following command:</para>
    <synopsis>
      <command>scl --list</command>
    </synopsis>
    <para>To get a list of installed packages contained within a specified &DSCL;, run the following command:</para>
    <synopsis>
      <command>scl --list <replaceable>software_collection_1</replaceable></command>
    </synopsis>
    </section>
  <section id="sect-Enabling_the_Software_Collection">
    <title>Enabling a &DSCL;</title>
    <para>The <application>scl</application> tool is used to enable a &DSCL; and to run applications in the &DSCL; environment.</para>
    <para>General usage of the <application>scl</application> tool can be described using the following syntax:</para>
    <synopsis>
      <command>scl</command>
      <replaceable>action</replaceable>
      <replaceable>software_collection_1</replaceable>
      <replaceable>software_collection_2</replaceable>
      <replaceable>command</replaceable>
    </synopsis>
      <para>If you are running a <command><replaceable>command</replaceable></command> with multiple arguments, remember to enclose the command and its arguments in quotes:</para>
    <synopsis>
      <command>scl</command>
      <replaceable>action</replaceable>
      <replaceable>software_collection_1</replaceable>
      <replaceable>software_collection_2</replaceable>
      <replaceable>'command</replaceable> <replaceable>--argument'</replaceable>
    </synopsis>
    <para>Alternatively, use a <command>--</command> command separator to run a <command><replaceable>command</replaceable></command> with multiple arguments:</para>
    <synopsis>
      <command>scl</command>
      <replaceable>action</replaceable>
      <replaceable>software_collection_1</replaceable>
      <replaceable>software_collection_2</replaceable>
      --
      <replaceable>command</replaceable> <replaceable>--argument</replaceable>
    </synopsis>
    <itemizedlist>
      <title>Remember that:</title>
      <listitem>
      <para>
        When you run the <application>scl</application> tool, it creates a child process (subshell) of the current shell. Running the command again then creates a subshell of the subshell.
      </para>
      </listitem>
      <listitem>
      <para>
        You can list enabled &DSCL;s for the current subshell. See <xref linkend="sect-Listing_Enabled_Software_Collections" /> for more information.
      </para>
      </listitem>
      <listitem>
      <para>
        You have to disable an enabled &DSCL; first to be able to enable it again. To disable the &DSCL;, exit the subshell created when enabling the &DSCL;s.
      </para>
      </listitem>
      <listitem>
      <para>
        When using the <application>scl</application> tool to enable a &DSCL;, you can only perform one action with the enabled &DSCL; at a time. The enabled &DSCL; must be disabled first before performing another action.
      </para>
      </listitem>
    </itemizedlist>
    <section id="sect-Running_an_Application_Directly">
      <title>Running an Application Directly</title>
      <para>For example, to directly run <application>Perl</application> with the <option>--version</option> option in the &DSCL; named <application>software_collection_1</application>, execute the following command:</para>
      <synopsis>
        <command>scl enable software_collection_1 'perl --version'</command>
      </synopsis>
      <para>Alternatively, you can provide a <package>syspaths</package> subpackage that makes it more convenient to run commands in the &DSCL; environment. For more information on <package>syspaths</package> subpackages, see <xref linkend="sect-Providing_syspaths_Subpackages" />.</para>
    </section>
    <section id="sect-Running_a_Shell_with_Multiple_Software_Collections_Enabled">
      <title>Running a Shell with Multiple &DSCL;s Enabled</title>
      <para>To run the <application>Bash</application> shell in the environment with multiple &DSCL;s enabled, execute the following command:</para>
      <synopsis>
        <command>scl enable software_collection_1 software_collection_2 bash</command>
      </synopsis>
      <para>The command above enables two &DSCL;s, named <application>software_collection_1</application> and <application>software_collection_2</application>.
      </para>
    </section>
    <section id="sect-Running_Commands_Stored_in_a_File">
      <title>Running Commands Stored in a File</title>
      <para>To execute a number of commands, which are stored in a file, in the &DSCL; environment, run the following command:</para>
      <synopsis>
        <command>cat cmd | scl enable software_collection_1 -</command>
      </synopsis>
      <para>The command above executes commands, which are stored in the <filename>cmd</filename> file, in the environment of the &DSCL; named <application>software_collection_1</application>.</para>
    </section>
  </section>
  <section id="sect-Listing_Enabled_Software_Collections">
    <title>Listing Enabled &DSCL;s</title>
    <para>
    	To get a list of &DSCL;s that are enabled in the current session, print the <envar>$X_SCLS</envar> environment variable by running the following command:
    </para>
    <synopsis><command>echo $X_SCLS</command>
    </synopsis>
  </section>
  <section id="sect-Uninstalling_a_Software_Collection">
    <title>Uninstalling a &DSCL;</title>
    <para>
    	You can use conventional tools like <application>Yum</application> or <application>PackageKit</application> when uninstalling a &DSCL; because &DSCL;s are fully compatible with the RPM Package Manager. For example, to uninstall all packages and subpackages that are part of a &DSCL; named <code>software_collection_1</code>, run the following command:</para>
    <synopsis>
      <command>yum remove software_collection_1\*</command>
    </synopsis>
    <para>
    	You can also use the <command>yum remove</command> command to remove the <application>scl</application> utility.
    </para>
    <para>For detailed information on <application>Yum</application> and <application>PackageKit</application> usage, see the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html">Red Hat Enterprise Linux 7 System Administrator's Guide</ulink>, or the <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/index.html">Red Hat Enterprise Linux 6 Deployment Guide</ulink>.</para>
  </section>
</chapter>
