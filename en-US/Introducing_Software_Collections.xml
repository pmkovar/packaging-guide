<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chap-Introducing_Software_Collections">
  <title>Introducing &DSCL;s</title>
  <para>This chapter introduces you to packaging with &DSCL;s or &DSC;s for short.</para>
  <section id="sect-What_Are_Software_Collections">
    <title>What Are &DSCL;s</title>
    <para>With &DSCL;s, you can concurrently install multiple versions of the same RPM packages on your system. &DSCL;s have no impact on the system versions of the packages installed by the conventional RPM package manager.
</para>
    <variablelist>
    <title>&DSCL;s:</title>
      <varlistentry>
        <term>Do not overwrite system files</term>
        <listitem>
          <para>&DSCL;s are distributed as a set of several components, which provide their full functionality without overwriting system files.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Are designed to avoid conflicts with system files</term>
        <listitem>
          <para>&DSCL;s make use of a special file system hierarchy to avoid possible conflicts between a single &DSCL; and the base system installation.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Require no changes to the RPM package manager</term>
        <listitem>
          <para>&DSCL; require no changes to the RPM package manager present on the host system.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Need only minor changes to the spec file</term>
        <listitem>
          <para>To convert a conventional package to a single &DSCL;, you only need to make minor changes to the package spec file.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Allow you to build a conventional package and a &DSCL; package with a single spec file</term>
        <listitem>
          <para>With a single spec file, you can build both the conventional package and the &DSCL; package.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Allow you to use a spec file from one &DSCL; to build a different &DSCL;</term>
        <listitem>
          <para>You can use a single spec file from one &DSCL; to build a different &DSCL;.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Uniquely name all included packages</term>
        <listitem>
          <para>With &DSCL;'s namespace, all packages included in the &DSCL; are uniquely named.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Do not conflict with updated packages</term>
        <listitem>
          <para>&DSCL;'s namespace ensures that updating packages on your system causes no conflicts.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Can depend on other &DSCL;s</term>
        <listitem>
          <para>Because one &DSCL; can depend on another, you can define multiple levels of dependencies.
</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section id="sect-File_System_Hierarchy">
    <title>File System Hierarchy</title>
    <para>The root directory of &DSCL;s is normally located in the <filename>/&OPT;/</filename> directory to avoid possible conflicts between &DSCL;s and the base system installation.</para>
    <para>You can change the location of the root directory by setting the <code>%_scl_prefix</code> macro in the spec file.</para>
    <para>Below is a typical layout of the file system hierarchy with two &DSCL;s, <replaceable>&DSCL; 1</replaceable> and <replaceable>&DSCL; 2</replaceable>:</para>
    <programlisting><replaceable>&OPT;</replaceable>
`-- <replaceable>&RH;</replaceable>
    |-- &DSCL; 1
    |   `-- <replaceable>architecture</replaceable>
    |       |-- &DSCL; root directory
    |       `-- &DSCL; scriptlets
    |
    `-- &DSCL; 2
        `-- <replaceable>architecture</replaceable>
            |-- &DSCL; root directory
            `-- &DSCL; scriptlets
	</programlisting>
    <para>For more information on the &DSCL; scriptlets, refer to <xref linkend="sect-Software_Collection_Scriptlets"/>.</para>
  </section>
  <section id="sect-Software_Collection_Scriptlets">
    <title>&DSCL; Scriptlets</title>
    <para>The &DSCL; scriptlets are simple shell scripts that change the current system environment so that the group of packages in the &DSCL; is preferred over the corresponding group of conventional packages installed on the system.</para>
    <para>To utilize the &DSCL; scriptlets, use the <application>scl</application> tool. For more information on <application>scl</application>, refer to <xref linkend="sect-Enabling_the_Software_Collection"/>.</para>
  </section>
  <section id="sect-Package_Layout">
    <title>Package Layout</title>
    <para>Each &DSCL;'s layout consists of the meta package, which installs a subset of other packages, and a number of the &DSCL;'s packages, which are installed within the &DSCL; namespace.</para>
    <section id="sect-Meta_Package">
      <title>Meta Package</title>
      <para>Each &DSCL; includes a meta package, which installs a minimal subset of essential packages. For example, the essential packages can provide the Perl language interpreter, but no Perl extension modules. The meta package contains a basic file system hierarchy and delivers a number of the &DSCL;'s scriptlets.</para>
      <para>The purpose of the meta package is to make sure that all essential packages in the &DSCL; are properly installed and that it is possible to enable the &DSCL;.</para>
      <para>The meta package produces the following packages that are also part of the &DSCL;:</para>
      <variablelist>
        <varlistentry>
          <term>The main package: <!--%{scl_prefix}-->%scl</term>
          <listitem>
            <para>The main package in the &DSCL; contains dependencies of the base packages, which are included in the &DSCL;. The main package does not contain any files.</para>
            <para>For example, if the name of the &DSCL; is <literal>ruby-1.8.7</literal>, then the main package macro is expanded to:</para>
            <programlisting><!--scl_-->ruby-1.8.7-core</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The runtime subpackage: <!--scl_--><replaceable>name</replaceable>-core-runtime</term>
          <listitem>
            <para>The runtime subpackage in the &DSCL; owns the &DSCL;'s file system and delivers the &DSCL;'s scriptlets.</para>
            <para>For example, if the name of the &DSCL; is <literal>ruby-1.8.7</literal>, then the runtime subpackage macro is expanded to:</para>
            <programlisting><!--scl_-->ruby-1.8.7-core-runtime</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>The build subpackage: <!--scl_--><replaceable>name</replaceable>-core-build</term>
          <listitem>
            <para>The build subpackage in the &DSCL; delivers the &DSCL;'s build configuration. The build subpackage is optional and can be excluded from the &DSCL;.</para>
            <para>For example, if the name of the &DSCL; is <literal>ruby-1.8.7</literal>, then the build subpackage macro is expanded to:</para>
            <programlisting><!--scl_-->ruby-1.8.7-core-build</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
<bridgehead id="bh-Example_of_the_Meta_Package">Example of the Meta Package</bridgehead>
<para>To get an idea of what a typical &DSCL; meta package looks like, see the following example:</para>
      <programlisting language="RPM Spec">%{!?scl:%global scl example}
%scl_package %scl

Summary: Package that installs %scl
Name: %scl_name
Version: 1
Release: 1%{?dist}
BuildArch: noarch
License: GPLv2+
Requires: %{scl_prefix}less
BuildRequires: scl-utils-build

%description
This is the main package for %scl Software Collection.

%package runtime
Summary: Package that handles %scl Software Collection.
Requires: scl-utils

%description runtime
Package shipping essential scripts to work with %scl Software Collection.

%package build
Summary: Package shipping basic build configuration

%description build
Package shipping essential configuration macros to build %scl Software Collection.

%install
rm -rf %{buildroot}
mkdir -p %{buildroot}%{_scl_scripts}/root
cat &gt;&gt; %{buildroot}%{_scl_scripts}/enable &lt;&lt; EOF
export PATH=%{_bindir}:\$PATH
EOF
%scl_install

%files

%files runtime
%scl_files

%files build
%{_root_sysconfdir}/rpm/macros.%{scl}-config

%changelog
* Thu Jan 07 2012 John Doe &lt;jdoe@example.com&gt; 1-1
- Initial package
      </programlisting>
    </section>
    <section id="sect-Packages_in_the_Software_Collection_Namespace">
      <title>Packages in the &DSCL; Namespace</title>
      <para>Besides the minimal subset of packages installed by the meta package, the &DSCL; also installs a number of packages that are part of the package collection itself.</para>
      <variablelist>
        <varlistentry>
          <term>&DSCL; package: <!--scl_--><replaceable>name</replaceable>-<replaceable>pkgname</replaceable></term>
          <listitem>
            <para>The &DSCL; can contain a number of packages, which are included in the &DSCL; namespace and relocated to the &DSCL;'s file system hierarchy.</para>
            <para>For example, if the name of the &DSCL; is <literal>ruby-1.8.7</literal>, then the &DSCL;'s package name for the <package>ruby-1.8.7.352-2.1.&PKGOS;.x86_64.rpm</package> package is:</para>
            <programlisting><!--scl_-->ruby-1.8.7-ruby-1.8.7.352-2.1.&PKGOS;.x86_64.rpm</programlisting>
            <para></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
  <section id="sect-Enabling_the_Software_Collection">
    <title>Enabling a &DSCL;</title>
    <para>The <application>scl</application> tool is used to enable a &DSCL; and to run applications in the &DSCL; environment.</para>
    <para>General usage of the <application>scl</application> tool can be described using the following syntax:</para>
    <synopsis>
      <command>scl</command>
      <replaceable>action</replaceable>
      <replaceable>software_collection_1</replaceable>
      <replaceable>software_collection_2</replaceable>
      <replaceable>command</replaceable>
    </synopsis>
    <section id="sect-Running_an_Application_Directly">
      <title>Running an Application Directly</title>
      <para>For example, to directly run <application>Perl</application> with the <option>--version</option> option in the &DSCL; named <application>core</application>, execute the following command:</para>
      <synopsis>
        <command>scl enable core 'perl --version'</command>
      </synopsis>
    </section>
    <section id="sect-Running_a_Shell_with_Multiple_Software_Collections_Enabled">
      <title>Running a Shell with Multiple &DSCL;s Enabled</title>
      <para>To run the <application>Bash</application> shell in the environment with multiple &DSCL;s enabled, execute the following command:</para>
      <synopsis>
        <command>scl enable core1 core2 bash</command>
      </synopsis>
      <para>The command above enables two &DSCL;s named <application>core1</application> and <application>core2</application>.</para>
    </section>
    <section id="sect-Running_Commands_Stored_in_a_File">
      <title>Running Commands Stored in a File</title>
      <para>To execute a number of commands, which are stored in a file, in the &DSCL; environment, run the following command:</para>
      <synopsis>
        <command>cat cmd | scl enable core -</command>
      </synopsis>
      <para>The command above executes commands, which are stored in the <filename>cmd</filename> file, in the environment of the &DSCL; named <application>core</application>.</para>
    </section>
  </section>
</chapter>
